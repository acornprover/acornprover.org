from nat import Nat
numerals Nat

// Multi-step proofs

define threeven(n: Nat) -> Bool {
    exists(d: Nat) {
        3 * d = n
    }
}

theorem zero_is_threeven {
    threeven(0)
}

theorem threeven_plus_three(n: Nat) {
    threeven(n) -> threeven(n + 3)
} by {
    let d: Nat satisfy {
        3 * d = n
    }
    3 * (d + 1) = n + 3
}

// Indirect proofs

define throdd(n: Nat) -> Bool {
    not threeven(n)
}

theorem throdd_follows_threeven(n: Nat) {
    threeven(n) -> throdd(n + 1)
} by {
    if threeven(n + 1) {
        let a: Nat satisfy {
            3 * a = n
        }
        let b: Nat satisfy {
            3 * b = n + 1
        }
        3 * (b - a) = 1
        false
    }
}

theorem threeven_kinda_follows_throdd(n: Nat) {
    throdd(n) -> threeven(n + 1) or threeven(n + 2)
} by {
    // By the division theorem
    let (d: Nat, r: Nat) satisfy {
        d * 3 + r = n and r < 3
    }

    // The impossible case
    if r = 0 {
        threeven(n)
        false
    }

    // The possible cases
    if r = 1 {
        3 * (d + 1) = n + 2
        threeven(n + 2)
    } else {
        r = 2
        3 * (d + 1) = n + 1
        threeven(n + 1)
    }
}