from nat import Nat
numerals Nat

// Multi-step proofs

define threeven(n: Nat) -> Bool {
    exists(d: Nat) {
        3 * d = n
    }
}

theorem zero_is_threeven {
    threeven(0)
}

theorem threeven_plus_three(n: Nat) {
    threeven(n) -> threeven(n + 3)
} by {
    let d: Nat satisfy {
        3 * d = n
    }
    3 * (d + 1) = n + 3
}

// Induction

define threeven_nearby(n: Nat) -> Bool {
    threeven(n) or threeven(n + 1) or threeven(n + 2)
}

theorem base_case {
    threeven_nearby(0)
}

theorem inductive_step(n: Nat) {
    threeven_nearby(n) -> threeven_nearby(n + 1)
} by {
    if not threeven_nearby(n + 1) {
        not threeven(n + 1) and not threeven(n + 2)
        threeven(n)
        false
    }
}

theorem threeven_everywhere(n: Nat) {
    threeven_nearby(n)
}