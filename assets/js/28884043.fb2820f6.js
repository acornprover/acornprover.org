"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[7398],{4773:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"library/Semiring","title":"Semiring","description":"A semiring is like a ring but without additive inverses.","source":"@site/docs/library/Semiring.md","sourceDirName":"library","slug":"/library/Semiring","permalink":"/docs/library/Semiring","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Semiring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Semigroup","permalink":"/docs/library/Semigroup"},"next":{"title":"Set","permalink":"/docs/library/Set"}}');var d=n(4848),t=n(8453);const l={},a="Semiring",s={},o=[{value:"add",id:"add",level:2},{value:"add_associative",id:"add_associative",level:2},{value:"add_identity_left",id:"add_identity_left",level:2},{value:"add_identity_right",id:"add_identity_right",level:2},{value:"commutative",id:"commutative",level:2},{value:"distrib_left",id:"distrib_left",level:2},{value:"distrib_right",id:"distrib_right",level:2},{value:"mul",id:"mul",level:2},{value:"mul_associative",id:"mul_associative",level:2},{value:"mul_identity_left",id:"mul_identity_left",level:2},{value:"mul_identity_right",id:"mul_identity_right",level:2},{value:"mul_zero_left",id:"mul_zero_left",level:2},{value:"mul_zero_right",id:"mul_zero_right",level:2},{value:"pow",id:"pow",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.header,{children:(0,d.jsx)(i.h1,{id:"semiring",children:"Semiring"})}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"typeclass S: Semiring extends AddCommMonoid, Monoid {\n    distrib_left(a: S, b: S, c: S) {\n        a * (b + c) = (a * b) + (a * c)\n    }\n    distrib_right(a: S, b: S, c: S) {\n        (a + b) * c = (a * c) + (b * c)\n    }\n    mul_zero_left(a: S) {\n        a * S.0 = S.0\n    }\n    mul_zero_right(a: S) {\n        S.0 * a = S.0\n    }\n}\n"})}),"\n",(0,d.jsx)(i.p,{children:"A semiring is like a ring but without additive inverses.\nIt has two operations where addition forms a commutative monoid, multiplication forms a monoid,\nand multiplication distributes over addition."}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/semiring.ac",children:"GitHub"})}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"add",children:"add"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddSemigroup/#add",children:"AddSemigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"add_associative",children:"add_associative"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddSemigroup/#add_associative",children:"AddSemigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"add_identity_left",children:"add_identity_left"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddMonoid/#add_identity_left",children:"AddMonoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"add_identity_right",children:"add_identity_right"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddMonoid/#add_identity_right",children:"AddMonoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"commutative",children:"commutative"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddCommSemigroup/#commutative",children:"AddCommSemigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"distrib_left",children:"distrib_left"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"distrib_left(a: S, b: S, c: S) {\n    a * (b + c) = (a * b) + (a * c)\n}\n"})}),"\n",(0,d.jsxs)(i.p,{children:["Multiplication distributes over addition from the left: ",(0,d.jsx)(i.code,{children:"a * (b + c) = (a * b) + (a * c)"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"distrib_right",children:"distrib_right"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"distrib_right(a: S, b: S, c: S) {\n    (a + b) * c = (a * c) + (b * c)\n}\n"})}),"\n",(0,d.jsxs)(i.p,{children:["Multiplication distributes over addition from the right: ",(0,d.jsx)(i.code,{children:"(a + b) * c = (a * c) + (b * c)"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul",children:"mul"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Semigroup/#mul",children:"Semigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul_associative",children:"mul_associative"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Semigroup/#mul_associative",children:"Semigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul_identity_left",children:"mul_identity_left"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Monoid/#mul_identity_left",children:"Monoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul_identity_right",children:"mul_identity_right"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Monoid/#mul_identity_right",children:"Monoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul_zero_left",children:"mul_zero_left"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"mul_zero_left(a: S) {\n    a * S.0 = S.0\n}\n"})}),"\n",(0,d.jsx)(i.p,{children:"Multiplying by the additive identity yields the additive identity."}),"\n",(0,d.jsx)(i.h2,{id:"mul_zero_right",children:"mul_zero_right"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"mul_zero_right(a: S) {\n    S.0 * a = S.0\n}\n"})}),"\n",(0,d.jsx)(i.p,{children:"Multiplying the additive identity by anything yields the additive identity."}),"\n",(0,d.jsx)(i.h2,{id:"pow",children:"pow"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Monoid/#pow",children:"Monoid"}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>a});var r=n(6540);const d={},t=r.createContext(d);function l(e){const i=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);