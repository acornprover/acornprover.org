"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[3564],{7745:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"library/List","title":"List","description":"A generic list data structure that can hold elements of any type.","source":"@site/docs/library/List.md","sourceDirName":"library","slug":"/library/List","permalink":"/docs/library/List","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/List.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"LinearOrder","permalink":"/docs/library/LinearOrder"},"next":{"title":"MetricSpace","permalink":"/docs/library/MetricSpace"}}');var l=i(4848),t=i(8453);const a={},r="List",c={},d=[{value:"add",id:"add",level:2},{value:"append",id:"append",level:2},{value:"cons",id:"cons",level:2},{value:"contains",id:"contains",level:2},{value:"contains_every",id:"contains_every",level:2},{value:"count",id:"count",level:2},{value:"drop",id:"drop",level:2},{value:"drop_last",id:"drop_last",level:2},{value:"filter",id:"filter",level:2},{value:"find_first_idx",id:"find_first_idx",level:2},{value:"get_idx",id:"get_idx",level:2},{value:"is_unique",id:"is_unique",level:2},{value:"length",id:"length",level:2},{value:"map",id:"map",level:2},{value:"nil",id:"nil",level:2},{value:"range",id:"range",level:2},{value:"remove_elem",id:"remove_elem",level:2},{value:"singleton",id:"singleton",level:2},{value:"tail",id:"tail",level:2},{value:"unique",id:"unique",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"list",children:"List"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"inductive List[T] {\n    nil\n    cons(T, List[T])\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"A generic list data structure that can hold elements of any type.\nLists are constructed using nil (empty list) and cons (prepending an element)."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/list.ac",children:"GitHub"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"add",children:"add"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define add(self, other: List[T]) -> List[T] {\n    match self {\n        List.nil {\n            other\n        }\n        List.cons(head, tail) {\n            List.cons(head, tail.add(other))\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Concatenates two lists together."}),"\n",(0,l.jsx)(n.h2,{id:"append",children:"append"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define append(self, item: T) -> List[T] {\n    self + List.singleton(item)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Appends a single element to the end of the list."}),"\n",(0,l.jsx)(n.h2,{id:"cons",children:"cons"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"List.cons: (T, List[T]) -> List[T]\n"})}),"\n",(0,l.jsx)(n.p,{children:"Constructs a list by prepending an element to an existing list."}),"\n",(0,l.jsx)(n.h2,{id:"contains",children:"contains"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define contains(self, item: T) -> Bool {\n    match self {\n        List.nil {\n            false\n        }\n        List.cons(head, tail) {\n            if head = item {\n                true\n            } else {\n                tail.contains(item)\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if this list contains the given item."}),"\n",(0,l.jsx)(n.h2,{id:"contains_every",children:"contains_every"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define contains_every(self) -> Bool {\n    forall(x: T) {\n        self.contains(x)\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if this list contains every element of type T."}),"\n",(0,l.jsx)(n.h2,{id:"count",children:"count"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define count(self, item: T) -> Nat {\n    match self {\n        List.nil[T] {\n            Nat.0\n        }\n        List.cons(head, tail) {\n            if head = item {\n                1 + tail.count(item)\n            } else {\n                tail.count(item)\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The number of times the given item appears in the list."}),"\n",(0,l.jsx)(n.h2,{id:"drop",children:"drop"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define drop(self, n: Nat) -> List[T] {\n    match n {\n        Nat.0 {\n            self\n        }\n        Nat.suc(pred) {\n            self.tail.drop(pred)\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Removes the first n elements from the list."}),"\n",(0,l.jsx)(n.h2,{id:"drop_last",children:"drop_last"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define drop_last(self, n: Nat) -> List[T] {\n    match self {\n        List.nil {\n            List.nil[T]\n        }\n        List.cons(head, tail) {\n            if tail.length < n {\n                List.nil[T]\n            } else {\n                List.cons(head, tail.drop_last(n))\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Removes the last n elements from the list."}),"\n",(0,l.jsx)(n.h2,{id:"filter",children:"filter"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define filter(self, f: T -> Bool) -> List[T] {\n    match self {\n        List.nil {\n            List.nil[T]\n        }\n        List.cons(head, tail) {\n            if f(head) {\n                List.cons(head, tail.filter(f))\n            } else {\n                tail.filter(f)\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Filters the list, keeping only elements that satisfy the given predicate."}),"\n",(0,l.jsx)(n.h2,{id:"find_first_idx",children:"find_first_idx"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define find_first_idx(self, item: T) -> Nat {\n    match self {\n        List.nil {\n            Nat.0\n        }\n        List.cons(head, tail) {\n            if head = item {\n                Nat.0\n            } else {\n                1 + tail.find_first_idx(item)\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The index of the first occurrence of the item in the list.\nReturns the list length if the item is not found."}),"\n",(0,l.jsx)(n.h2,{id:"get_idx",children:"get_idx"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define get_idx(self, i: Nat) -> Option[T] {\n    match self {\n        List.nil {\n            Option.none\n        }\n        List.cons(head, tail) {\n            if i > 0 {\n                tail.get_idx(i - 1)\n            } else {\n                Option.some(head)\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The element at index i, or none if the index is out of bounds."}),"\n",(0,l.jsx)(n.h2,{id:"is_unique",children:"is_unique"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define is_unique(self) -> Bool {\n    self.unique = self\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if all elements in the list are distinct."}),"\n",(0,l.jsx)(n.h2,{id:"length",children:"length"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define length(self) -> Nat {\n    match self {\n        List.nil {\n            Nat.0\n        }\n        List.cons(_, tail) {\n            tail.length.suc\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Yields the number of elements in the list."}),"\n",(0,l.jsx)(n.h2,{id:"map",children:"map"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define map[U](self, f: T -> U) -> List[U] {\n    match self {\n        List.nil {\n            List.nil[U]\n        }\n        List.cons(head, tail) {\n            List.cons(f(head), tail.map(f))\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Applies a function to each element of a list, creating a new list of results."}),"\n",(0,l.jsx)(n.h2,{id:"nil",children:"nil"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"List.nil: List[T]\n"})}),"\n",(0,l.jsx)(n.p,{children:"The empty list."}),"\n",(0,l.jsx)(n.h2,{id:"range",children:"range"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"let range: Nat -> List[Nat] = Nat.range\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a list of natural numbers from 0 to n-1."}),"\n",(0,l.jsx)(n.h2,{id:"remove_elem",children:"remove_elem"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define remove_elem(self, elem: T) -> List[T] {\n    match self {\n        List.nil {\n            List.nil[T]\n        }\n        List.cons(head, tail) {\n            if head != elem {\n                List.cons(head, tail.remove_elem(elem))\n            } else {\n                tail.remove_elem(elem)\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Remove all instances of an element from the list."}),"\n",(0,l.jsx)(n.h2,{id:"singleton",children:"singleton"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"let singleton: T -> List[T] = function(x: T) {\n    List.cons(x, List.nil[T])\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a list containing a single element."}),"\n",(0,l.jsx)(n.h2,{id:"tail",children:"tail"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define tail(self) -> List[T] {\n    match self {\n        List.nil {\n            List.nil[T]\n        }\n        List.cons(h, t) {\n            t\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Yields the list without its first element.\nYields nil for an empty list."}),"\n",(0,l.jsx)(n.h2,{id:"unique",children:"unique"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define unique(self) -> List[T] {\n    match self {\n        List.nil {\n            List.nil[T]\n        }\n        List.cons(head, tail) {\n            if tail.contains(head) {\n                tail.unique\n            } else {\n                List.cons(head, tail.unique)\n            }\n        }\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Removes all duplicate elements from the list.\nWhen duplicates exist, the last occurrence is kept."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var s=i(6540);const l={},t=s.createContext(l);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);