"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[1699],{1485:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var s=n(1362),a=n(4848),i=n(8453);const o={slug:"extending-typeclasses",title:"Extending Typeclasses",authors:["lacker"],tags:["language"],image:"/img/extends.png"},r=void 0,c={authorsImageUrls:[void 0]},l=[];function p(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Typeclasses in Acorn provide a powerful way to define common behaviors across different types. But what happens when you need to build upon existing typeclasses? Today, we're introducing typeclass extension."}),"\n",(0,a.jsx)(t.p,{children:"With typeclass extension, you can create more specialized typeclasses that inherit from existing ones:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-acorn",children:'// The default semigroup uses the "multiplication" operator.\ntypeclass S: Semigroup {\n    // The semigroup operation\n    mul: (S, S) -> S\n\n    // Associativity property\n    mul_associative(a: S, b: S, c: S) {\n        a * (b * c) = (a * b) * c\n    }\n}\n\n// A multiplicative monoid is a multiplicative semigroup\n// with an identity element.\ntypeclass M: Monoid extends Semigroup {\n    e: M\n\n    // The identity element must satisfy the identity property\n    mul_identity_right(a: M) {\n        a * M.e = a\n    }\n\n    // Other direction of the identity property\n    mul_identity_left(a: M) {\n        M.e * a = a\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This allows you to build hierarchies of mathematical structures naturally, and much of ",(0,a.jsx)(t.a,{href:"https://github.com/acornprover/acornlib",children:"acornlib"})," has already been converted to use extended typeclasses."]}),"\n",(0,a.jsx)(t.p,{children:"You can also extend multiple typeclasses at once, combining their requirements into more complex structures. This makes it easier to model the rich relationships between different mathematical concepts."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-acorn",children:"typeclass Ring extends Semiring, AddCommGroup\n"})}),"\n",(0,a.jsxs)(t.p,{children:["For more information, see the ",(0,a.jsx)(t.a,{href:"/docs/language/typeclasses/",children:"typeclasses documentation"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Try out typeclass extension in the latest version of Acorn, and let us know what you think in ",(0,a.jsx)(t.a,{href:"https://discord.com/invite/RqXxaye4MC",children:"Discord"}),"!"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},1362:e=>{e.exports=JSON.parse('{"permalink":"/blog/extending-typeclasses","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-05-29-extending-typeclasses.md","source":"@site/blog/2025-05-29-extending-typeclasses.md","title":"Extending Typeclasses","description":"Typeclasses in Acorn provide a powerful way to define common behaviors across different types. But what happens when you need to build upon existing typeclasses? Today, we\'re introducing typeclass extension.","date":"2025-05-29T00:00:00.000Z","tags":[{"inline":false,"label":"language","permalink":"/blog/tags/language","description":"Posts about the Acorn language, like new keywords or syntax."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"extending-typeclasses","title":"Extending Typeclasses","authors":["lacker"],"tags":["language"],"image":"/img/extends.png"},"unlisted":false,"nextItem":{"title":"Typeclasses and Generic Inductive Types","permalink":"/blog/typeclasses-and-generic-inductive-types"}}')}}]);