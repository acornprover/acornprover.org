"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[9796],{4392:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"language/generics","title":"Generics","description":"Generics let you prove things once, and use the result for many different types.","source":"@site/docs/language/generics.md","sourceDirName":"language","slug":"/language/generics","permalink":"/docs/language/generics","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/language/generics.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"sidebar","previous":{"title":"Classes","permalink":"/docs/language/classes"},"next":{"title":"Experimental Stuff","permalink":"/docs/language/experimental-stuff"}}');var i=r(4848),s=r(8453);const a={sidebar_position:9},c="Generics",o={},l=[{value:"Generic Structures",id:"generic-structures",level:2},{value:"Generic Definitions",id:"generic-definitions",level:2},{value:"Generic Theorems",id:"generic-theorems",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"generics",children:"Generics"})}),"\n",(0,i.jsx)(n.p,{children:"Generics let you prove things once, and use the result for many different types."}),"\n",(0,i.jsx)(n.h2,{id:"generic-structures",children:"Generic Structures"}),"\n",(0,i.jsx)(n.p,{children:"You can define a generic structure by putting a list of generic parameters\nafter the type name."}),"\n",(0,i.jsxs)(n.p,{children:["For example, let's define a ",(0,i.jsx)(n.code,{children:"LatticePoint"})," that doesn't just have to be composed of integers, but can be any type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"structure LatticePoint<T> {\n    x: T\n    y: T\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"T"})," is the generic parameter."]}),"\n",(0,i.jsxs)(n.p,{children:["If we define ",(0,i.jsx)(n.code,{children:"LatticePoint"})," this way, then ",(0,i.jsx)(n.code,{children:"LatticePoint<Int>"})," works exactly the same as if we had defined it with:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"structure LatticePoint {\n    x: Int\n    y: Int\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can have multiple generic parameters in a single parameter list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"structure Pair<T, U> {\n    first: T\n    second: U\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"generic-definitions",children:"Generic Definitions"}),"\n",(0,i.jsx)(n.p,{children:"You can define a generic function by including type parameters after the function name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define colinear<T>(a: LatticePoint<T>, b: LatticePoint<T>) -> Bool {\n    a.x = b.x or a.y = b.y\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Similarly, you can define member functions on a generic structure."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"class LatticePoint<T> {\n    define swap(self) -> LatticePoint<T> {\n        LatticePoint.new(self.y, self.x)\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"When you call generic functions, you generally do not need to provide the type parameters, because\nthey can be inferred from the types of the arguments."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"import Int\nnumerals Int\n\n// No parameters on LatticePoint.new are needed.\nlet origin: LatticePoint<Int> = LatticePoint.new(0, 0)\n\n// No parameters on colinear are needed.\ntheorem origin_self_colinear {\n    colinear(origin, origin)\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"generic-theorems",children:"Generic Theorems"}),"\n",(0,i.jsx)(n.p,{children:"Similarly, you can define generic theorems by including type parameters after the theorem name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"theorem swap_is_involutive<T>(p: LatticePoint<T>) {\n    p.swap.swap = p\n} by {\n    p.swap.x = p.y\n    p.swap.y = p.x\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"When you prove a generic theorem, it can be instantiated to any type."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);