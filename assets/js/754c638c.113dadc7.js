"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[7854],{4612:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"library/Rat","title":"Rat","description":"Rational numbers represented as fractions in reduced form.","source":"@site/docs/library/Rat.md","sourceDirName":"library","slug":"/library/Rat","permalink":"/docs/library/Rat","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Rat.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"PartialOrder","permalink":"/docs/library/PartialOrder"},"next":{"title":"Real","permalink":"/docs/library/Real"}}');var l=r(4848),i=r(8453);const s={},t="Rat",o={},d=[{value:"abs",id:"abs",level:2},{value:"add",id:"add",level:2},{value:"denom",id:"denom",level:2},{value:"div",id:"div",level:2},{value:"from_int",id:"from_int",level:2},{value:"from_nat",id:"from_nat",level:2},{value:"gt",id:"gt",level:2},{value:"gte",id:"gte",level:2},{value:"is_close",id:"is_close",level:2},{value:"is_negative",id:"is_negative",level:2},{value:"is_positive",id:"is_positive",level:2},{value:"lt",id:"lt",level:2},{value:"lte",id:"lte",level:2},{value:"mul",id:"mul",level:2},{value:"neg",id:"neg",level:2},{value:"num",id:"num",level:2},{value:"read",id:"read",level:2},{value:"reciprocal",id:"reciprocal",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"rat",children:"Rat"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"structure Rat {\n    num: Int\n    denom: Int\n} constraint {\n    is_reduced(num, denom)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Rational numbers represented as fractions in reduced form.\nThe constraint ensures the fraction is always in lowest terms with positive denominator."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/rat.ac",children:"GitHub"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"abs",children:"abs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define abs(self) -> Rat {\n    if self.is_negative {\n        -self\n    } else {\n        self\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The absolute value of a rational number."}),"\n",(0,l.jsx)(n.h2,{id:"add",children:"add"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define add(self, other: Rat) -> Rat {\n    reduce(self.num * other.denom + other.num * self.denom, self.denom * other.denom)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The sum of two rational numbers."}),"\n",(0,l.jsx)(n.h2,{id:"denom",children:"denom"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"Rat.denom: Rat -> Int\n"})}),"\n",(0,l.jsx)(n.p,{children:"The denominator of the rational number (always positive)."}),"\n",(0,l.jsx)(n.h2,{id:"div",children:"div"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define div(self, other: Rat) -> Rat {\n    self * other.reciprocal\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The quotient of two rational numbers.\nDivision by zero is defined to yield zero."}),"\n",(0,l.jsx)(n.h2,{id:"from_int",children:"from_int"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"let from_int = function(n: Int) {\n    Rat.new(n, Int.1)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Converts an integer to a rational number."}),"\n",(0,l.jsx)(n.h2,{id:"from_nat",children:"from_nat"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"let from_nat: Nat -> Rat = function(n: Nat) {\n    Rat.from_int(Int.from_nat(n))\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Converts a natural number to a rational number."}),"\n",(0,l.jsx)(n.h2,{id:"gt",children:"gt"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define gt(self, other: Rat) -> Bool {\n    other < self\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if this rational is greater than the other."}),"\n",(0,l.jsx)(n.h2,{id:"gte",children:"gte"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define gte(self, other: Rat) -> Bool {\n    other <= self\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if this rational is greater than or equal to the other."}),"\n",(0,l.jsx)(n.h2,{id:"is_close",children:"is_close"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define is_close(self, other: Rat, eps: Rat) -> Bool {\n    (self - other).abs < eps\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if the absolute difference between two rationals is less than epsilon."}),"\n",(0,l.jsx)(n.h2,{id:"is_negative",children:"is_negative"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define is_negative(self) -> Bool {\n    self.num.is_negative\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if the rational is negative."}),"\n",(0,l.jsx)(n.h2,{id:"is_positive",children:"is_positive"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define is_positive(self) -> Bool {\n    self.num.is_positive\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if the rational is positive."}),"\n",(0,l.jsx)(n.h2,{id:"lt",children:"lt"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define lt(self, other: Rat) -> Bool {\n    (other - self).is_positive\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if this rational is less than the other."}),"\n",(0,l.jsx)(n.h2,{id:"lte",children:"lte"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define lte(self, other: Rat) -> Bool {\n    self < other or self = other\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if this rational is less than or equal to the other."}),"\n",(0,l.jsx)(n.h2,{id:"mul",children:"mul"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define mul(self, other: Rat) -> Rat {\n    reduce(self.num * other.num, self.denom * other.denom)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The product of two rational numbers."}),"\n",(0,l.jsx)(n.h2,{id:"neg",children:"neg"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define neg(self) -> Rat {\n    Rat.new(-self.num, self.denom)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The negation of a rational number."}),"\n",(0,l.jsx)(n.h2,{id:"num",children:"num"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"Rat.num: Rat -> Int\n"})}),"\n",(0,l.jsx)(n.p,{children:"The numerator of the rational number."}),"\n",(0,l.jsx)(n.h2,{id:"read",children:"read"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define read(self, other: Rat) -> Rat {\n    Rat.10 * self + other\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The rational formed by appending a digit to this rational in base 10."}),"\n",(0,l.jsx)(n.h2,{id:"reciprocal",children:"reciprocal"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define reciprocal(self) -> Rat {\n    reduce(self.denom, self.num)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The reciprocal of a rational number (1/x).\nThe reciprocal of zero is defined to be zero."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>t});var a=r(6540);const l={},i=a.createContext(l);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);