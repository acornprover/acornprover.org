"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[2681],{5793:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"library/Real","title":"Real","description":"Real numbers are defined by a Dedekind cut. Specifically, using the gt_rat function which","source":"@site/docs/library/Real.md","sourceDirName":"library","slug":"/library/Real","permalink":"/docs/library/Real","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Real.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Rat","permalink":"/docs/library/Rat"},"next":{"title":"Ring","permalink":"/docs/library/Ring"}}');var a=r(4848),i=r(8453);const s={},t="Real",c={},o=[{value:"abs",id:"abs",level:2},{value:"add",id:"add",level:2},{value:"div",id:"div",level:2},{value:"from_int",id:"from_int",level:2},{value:"from_rat",id:"from_rat",level:2},{value:"gt",id:"gt",level:2},{value:"gt_rat",id:"gt_rat",level:2},{value:"gte",id:"gte",level:2},{value:"is_close",id:"is_close",level:2},{value:"is_negative",id:"is_negative",level:2},{value:"is_positive",id:"is_positive",level:2},{value:"lt",id:"lt",level:2},{value:"lte",id:"lte",level:2},{value:"mul",id:"mul",level:2},{value:"neg",id:"neg",level:2},{value:"reciprocal",id:"reciprocal",level:2},{value:"unit_sign",id:"unit_sign",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"real",children:"Real"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"structure Real {\n    gt_rat: Rat -> Bool\n} constraint {\n    is_dedekind_cut(gt_rat)\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Real numbers are defined by a Dedekind cut. Specifically, using the ",(0,a.jsx)(n.code,{children:"gt_rat"})," function which\nspecifies which rationals they are greater than."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/real/default.ac",children:"GitHub"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"abs",children:"abs"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define abs(self) -> Real {\n    if self.is_negative {\n        -self\n    } else {\n        self\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The absolute value of this real number."}),"\n",(0,a.jsx)(n.h2,{id:"add",children:"add"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define add(self, other: Real) -> Real {\n    Real.new(add_gt(self, other))\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The sum of two real numbers."}),"\n",(0,a.jsx)(n.h2,{id:"div",children:"div"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define div(self, other: Real) -> Real {\n    self * other.reciprocal\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The quotient of two real numbers (",(0,a.jsx)(n.code,{children:"self/other"}),")."]}),"\n",(0,a.jsx)(n.h2,{id:"from_int",children:"from_int"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"let from_int = function(n: Int) {\n    Real.from_rat(Rat.from_int(n))\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Converts an integer to a real number."}),"\n",(0,a.jsx)(n.h2,{id:"from_rat",children:"from_rat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"let from_rat = function(r: Rat) {\n    Real.new(r.gt)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Converts a rational number to a real number."}),"\n",(0,a.jsx)(n.h2,{id:"gt",children:"gt"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define gt(self, other: Real) -> Bool {\n    other.lt(self)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this real number is strictly greater than the other."}),"\n",(0,a.jsx)(n.h2,{id:"gt_rat",children:"gt_rat"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"Real.gt_rat: (Real, Rat) -> Bool\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this real number is greater than the given rational number."}),"\n",(0,a.jsx)(n.h2,{id:"gte",children:"gte"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define gte(self, other: Real) -> Bool {\n    other.lte(self)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this real number is greater than or equal to the other."}),"\n",(0,a.jsx)(n.h2,{id:"is_close",children:"is_close"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define is_close(self, other: Real, eps: Real) -> Bool {\n    (self - other).abs < eps\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["True if this real number is within ",(0,a.jsx)(n.code,{children:"eps"})," of the other real number."]}),"\n",(0,a.jsx)(n.h2,{id:"is_negative",children:"is_negative"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define is_negative(self) -> Bool {\n    self != Real.0 and not self.is_positive\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this real number is negative (less than zero)."}),"\n",(0,a.jsx)(n.h2,{id:"is_positive",children:"is_positive"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define is_positive(self) -> Bool {\n    self.gt_rat(Rat.0)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this real number is positive (greater than zero)."}),"\n",(0,a.jsx)(n.h2,{id:"lt",children:"lt"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define lt(self, other: Real) -> Bool {\n    self != other and self.lte(other)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this real number is strictly less than the other."}),"\n",(0,a.jsx)(n.h2,{id:"lte",children:"lte"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define lte(self, other: Real) -> Bool {\n    forall(r: Rat) {\n        self.gt_rat(r) implies other.gt_rat(r)\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The less-than-or-equal-to relation for real numbers."}),"\n",(0,a.jsx)(n.h2,{id:"mul",children:"mul"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define mul(self, other: Real) -> Real {\n    limit_rat(mul_rat_seq(rat_seq(self), rat_seq(other)))\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The product of two real numbers."}),"\n",(0,a.jsx)(n.h2,{id:"neg",children:"neg"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define neg(self) -> Real {\n    Real.new(neg_gt(self))\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The negative of this real number."}),"\n",(0,a.jsx)(n.h2,{id:"reciprocal",children:"reciprocal"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define reciprocal(self) -> Real {\n    if self = Real.0 {\n        Real.0\n    } else {\n        limit_rat(recip_rat_seq(rat_seq(self)))\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The reciprocal of this real number (",(0,a.jsx)(n.code,{children:"1/x"}),"). For zero, returns zero."]}),"\n",(0,a.jsx)(n.h2,{id:"unit_sign",children:"unit_sign"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define unit_sign(self) -> Real {\n    if self.is_negative {\n        -Real.1\n    } else {\n        Real.1\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The sign of this real number as a unit value (",(0,a.jsx)(n.code,{children:"-1"})," for negative, ",(0,a.jsx)(n.code,{children:"1"})," for non-negative)."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>t});var l=r(6540);const a={},i=l.createContext(a);function s(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);