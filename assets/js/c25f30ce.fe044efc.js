"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[9796],{4392:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"language/generics","title":"Generics","description":"Generics let you prove things once, and use the result for many different types.","source":"@site/docs/language/generics.md","sourceDirName":"language","slug":"/language/generics","permalink":"/docs/language/generics","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/language/generics.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"sidebar","previous":{"title":"Attributes","permalink":"/docs/language/attributes"},"next":{"title":"Typeclasses","permalink":"/docs/language/typeclasses"}}');var s=t(4848),r=t(8453);const c={sidebar_position:9},a="Generics",o={},d=[{value:"Generics with <code>structure</code>",id:"generics-with-structure",level:2},{value:"Generics with <code>inductive</code>",id:"generics-with-inductive",level:2},{value:"Generics with <code>attributes</code>",id:"generics-with-attributes",level:2},{value:"Generics with <code>define</code>",id:"generics-with-define",level:2},{value:"Generics with <code>theorem</code>",id:"generics-with-theorem",level:2},{value:"Generics with <code>let</code>",id:"generics-with-let",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"generics",children:"Generics"})}),"\n",(0,s.jsx)(n.p,{children:"Generics let you prove things once, and use the result for many different types."}),"\n",(0,s.jsx)(n.p,{children:"Several different Acorn keywords can be used in a generic way, by adding a list of type parameters."}),"\n",(0,s.jsxs)(n.h2,{id:"generics-with-structure",children:["Generics with ",(0,s.jsx)(n.code,{children:"structure"})]}),"\n",(0,s.jsx)(n.p,{children:"You can define a generic structure by putting a list of generic parameters\nafter the type name."}),"\n",(0,s.jsxs)(n.p,{children:["For example, let's define a ",(0,s.jsx)(n.code,{children:"LatticePoint"})," that doesn't just have to be composed of integers, but can be any type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"structure LatticePoint[T] {\n    x: T\n    y: T\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here, ",(0,s.jsx)(n.code,{children:"T"})," is the generic parameter."]}),"\n",(0,s.jsxs)(n.p,{children:["If we define ",(0,s.jsx)(n.code,{children:"LatticePoint"})," this way, then ",(0,s.jsx)(n.code,{children:"LatticePoint[Int]"})," works exactly the same as if we had defined it with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"structure LatticePoint {\n    x: Int\n    y: Int\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can have multiple generic parameters in a single parameter list."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"structure Pair[T, U] {\n    first: T\n    second: U\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"generics-with-inductive",children:["Generics with ",(0,s.jsx)(n.code,{children:"inductive"})]}),"\n",(0,s.jsx)(n.p,{children:"Similarly, you can define a generic inductive type."}),"\n",(0,s.jsxs)(n.p,{children:["For example, let's define the generic ",(0,s.jsx)(n.code,{children:"List"})," type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"inductive List[T] {\n    nil\n    cons(T, List[T])\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A list can be a list of anything, but a particular list can only be a list of one type of thing. A ",(0,s.jsx)(n.code,{children:"List[Int]"})," is a list of ",(0,s.jsx)(n.code,{children:"Int"}),", a ",(0,s.jsx)(n.code,{children:"List[Nat]"})," is a list of ",(0,s.jsx)(n.code,{children:"Nat"}),", a ",(0,s.jsx)(n.code,{children:"List[List[Bool]]"})," is a list of ",(0,s.jsx)(n.code,{children:"List[Bool]"}),", and so on."]}),"\n",(0,s.jsxs)(n.h2,{id:"generics-with-attributes",children:["Generics with ",(0,s.jsx)(n.code,{children:"attributes"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can define attributes for a parametrized type by adding parameters to the ",(0,s.jsx)(n.code,{children:"attributes"})," statement. The parameters have to match those used in the initial definition of the type."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"attributes List[T] {\n    // Whether this list contains a particular item.\n    define contains(self, item: T) -> Bool {\n        match self {\n            List.nil {\n                false\n            }\n            List.cons(head, tail) {\n                if head = item {\n                    true\n                } else {\n                    tail.contains(item)\n                }\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Acorn tries to infer the type for generics, so that you don't have to include the ",(0,s.jsx)(n.code,{children:"[T]"})," everywhere. In this example, we only have to use the type parameter ",(0,s.jsx)(n.code,{children:"T"})," to specify the type of the ",(0,s.jsx)(n.code,{children:"item"})," argument."]}),"\n",(0,s.jsxs)(n.h2,{id:"generics-with-define",children:["Generics with ",(0,s.jsx)(n.code,{children:"define"})]}),"\n",(0,s.jsx)(n.p,{children:"You can define a generic function by including type parameters after the function name."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"define colinear[T](a: LatticePoint[T], b: LatticePoint[T]) -> Bool {\n    a.x = b.x or a.y = b.y\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Similarly, you can define member functions on a generic structure."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"attributes LatticePoint[T] {\n    define swap(self) -> LatticePoint[T] {\n        LatticePoint.new(self.y, self.x)\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"When you call generic functions, you generally do not need to provide the type parameters, because\nthey can be inferred from the types of the arguments."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"import Int\nnumerals Int\n\n// No parameters on LatticePoint.new are needed.\nlet origin: LatticePoint[Int] = LatticePoint.new(0, 0)\n\n// No parameters on colinear are needed.\ntheorem origin_self_colinear {\n    colinear(origin, origin)\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"generics-with-theorem",children:["Generics with ",(0,s.jsx)(n.code,{children:"theorem"})]}),"\n",(0,s.jsx)(n.p,{children:"Similarly, you can define generic theorems by including type parameters after the theorem name."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"theorem swap_is_involutive[T](p: LatticePoint[T]) {\n    p.swap.swap = p\n} by {\n    p.swap.x = p.y\n    p.swap.y = p.x\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"When you prove a generic theorem, it can be instantiated to any type."}),"\n",(0,s.jsxs)(n.h2,{id:"generics-with-let",children:["Generics with ",(0,s.jsx)(n.code,{children:"let"})]}),"\n",(0,s.jsxs)(n.p,{children:["If I told you that the ",(0,s.jsx)(n.code,{children:"let"})," statement supported generics, and I didn't give you any sample code, I bet\nyou could guess how it worked anyway."]}),"\n",(0,s.jsx)(n.p,{children:"But just in case. It looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-acorn",children:"let is_finite[T]: Bool = exists(xs: List[T]) {\n    forall(x: T) {\n        xs.contains(x)\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The generic ",(0,s.jsx)(n.code,{children:"let"})," statement defines a constant for each type. You can think of it as a property of the type itself. In this case, it's defining whether the type itself is finite."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);