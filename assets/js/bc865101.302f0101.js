"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[2207],{9222:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>t,frontMatter:()=>s,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"library/Complex","title":"Complex","description":"Complex numbers consist of a real part and an imaginary part.","source":"@site/docs/library/Complex.md","sourceDirName":"library","slug":"/library/Complex","permalink":"/docs/library/Complex","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Complex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"CommSemigroup","permalink":"/docs/library/CommSemigroup"},"next":{"title":"Field","permalink":"/docs/library/Field"}}');var i=r(4848),a=r(8453);const s={},o="Complex",c={},d=[{value:"abs_squared",id:"abs_squared",level:2},{value:"add",id:"add",level:2},{value:"conj",id:"conj",level:2},{value:"div",id:"div",level:2},{value:"from_real",id:"from_real",level:2},{value:"i",id:"i",level:2},{value:"im",id:"im",level:2},{value:"is_imaginary",id:"is_imaginary",level:2},{value:"is_real",id:"is_real",level:2},{value:"mul",id:"mul",level:2},{value:"neg",id:"neg",level:2},{value:"re",id:"re",level:2},{value:"reciprocal",id:"reciprocal",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"complex",children:"Complex"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"structure Complex {\n    re: Real\n    im: Real\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Complex numbers consist of a real part and an imaginary part.\nThey extend the real numbers and satisfy the equation i\xb2 = -1."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/complex.ac",children:"GitHub"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"abs_squared",children:"abs_squared"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define abs_squared(self) -> Real {\n    self.re * self.re + self.im * self.im\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Computes the squared magnitude |z|\xb2 = re\xb2 + im\xb2."}),"\n",(0,i.jsx)(n.h2,{id:"add",children:"add"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define add(self, other: Complex) -> Complex {\n    Complex.new(self.re + other.re, self.im + other.im)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Adds two complex numbers component-wise."}),"\n",(0,i.jsx)(n.h2,{id:"conj",children:"conj"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define conj(self) -> Complex {\n    Complex.new(self.re, -self.im)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Yields the complex conjugate (negates the imaginary part)."}),"\n",(0,i.jsx)(n.h2,{id:"div",children:"div"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define div(self, other: Complex) -> Complex {\n    self * other.reciprocal\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Divides this complex number by another.\nDivision by zero returns zero (making this a total function)."}),"\n",(0,i.jsx)(n.h2,{id:"from_real",children:"from_real"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"let from_real: Real -> Complex = function(r: Real) {\n    Complex.new(r, Real.0)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Converts a real number to a complex number (with zero imaginary part)."}),"\n",(0,i.jsx)(n.h2,{id:"i",children:"i"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"let i: Complex = Complex.new(Real.0, Real.1)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The imaginary unit, satisfying ",(0,i.jsx)(n.code,{children:"i\xb2 = -1"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"im",children:"im"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"Complex.im: Complex -> Real\n"})}),"\n",(0,i.jsx)(n.p,{children:"The imaginary part of the complex number."}),"\n",(0,i.jsx)(n.h2,{id:"is_imaginary",children:"is_imaginary"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define is_imaginary(self) -> Bool {\n    self.re = Real.0 and self.im != Real.0\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"True if this complex number is purely imaginary (no real component)."}),"\n",(0,i.jsx)(n.h2,{id:"is_real",children:"is_real"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define is_real(self) -> Bool {\n    self.im = Real.0\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"True if this complex number has no imaginary component."}),"\n",(0,i.jsx)(n.h2,{id:"mul",children:"mul"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define mul(self, other: Complex) -> Complex {\n    Complex.new(self.re * other.re - self.im * other.im, self.re * other.im + self.im * other.re)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Multiplies two complex numbers using the formula (a+bi)(c+di) = (ac-bd)+(ad+bc)i."}),"\n",(0,i.jsx)(n.h2,{id:"neg",children:"neg"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define neg(self) -> Complex {\n    Complex.new(-self.re, -self.im)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Yields the additive inverse of this complex number."}),"\n",(0,i.jsx)(n.h2,{id:"re",children:"re"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"Complex.re: Complex -> Real\n"})}),"\n",(0,i.jsx)(n.p,{children:"The real part of the complex number."}),"\n",(0,i.jsx)(n.h2,{id:"reciprocal",children:"reciprocal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-acorn",children:"define reciprocal(self) -> Complex {\n    self.conj * Complex.from_real(self.abs_squared.reciprocal)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Computes the multiplicative inverse (1/z) for non-zero complex numbers.\nYields 0 when applied to 0 (division by zero yields zero)."})]})}function t(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var l=r(6540);const i={},a=l.createContext(i);function s(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),l.createElement(a.Provider,{value:n},e.children)}}}]);