"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[2517],{4407:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"library/int","title":"int.ac","description":"The int module provides integers and related functions.","source":"@site/docs/library/int.md","sourceDirName":"library","slug":"/library/int","permalink":"/docs/library/int","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/tree/main/packages/create-docusaurus/templates/shared/docs/library/int.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Bool","permalink":"/docs/library/bool"},"next":{"title":"nat.ac","permalink":"/docs/library/nat"}}');var s=t(4848),r=t(8453);const a={},o="int.ac",l={},d=[{value:"Int",id:"int",level:2},{value:"Int&#39;s operators",id:"ints-operators",level:2},{value:"abs: Int -&gt; Nat",id:"abs-int---nat",level:2},{value:"neg_nat: Nat -&gt; Int",id:"neg_nat-nat---int",level:2},{value:"is_negative: Nat -&gt; Bool",id:"is_negative-nat---bool",level:2},{value:"is_positive: Nat -&gt; Bool",id:"is_positive-nat---bool",level:2},{value:"is_unit: Int -&gt; Bool",id:"is_unit-int---bool",level:2},{value:"divides: (Int, Int) -&gt; Bool",id:"divides-int-int---bool",level:2},{value:"gcd: (Int, Int) -&gt; Int",id:"gcd-int-int---int",level:2},{value:"spans(a: Int, b: Int, c: Int) -&gt; Bool",id:"spansa-int-b-int-c-int---bool",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"intac",children:"int.ac"})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"int"})," module provides integers and related functions."]}),"\n",(0,s.jsx)(e.h2,{id:"int",children:"Int"}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"Int"})," type is defined by its two constructors."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-acorn",children:"inductive Int {\n    // The normal x -> x map\n    from_nat(Nat)\n\n    // x -> -(x+1)\n    neg_suc(Nat)\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Int.from_nat"})," is handy for converting natural numbers to integers. ",(0,s.jsx)(e.code,{children:"neg_suc"})," is unnatural and you probably shouldn't use it."]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Int"})," is a numeral type, so you can use the ",(0,s.jsx)(e.code,{children:"numerals Int"})," statement."]}),"\n",(0,s.jsx)(e.h2,{id:"ints-operators",children:"Int's operators"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Int"})," supports addition, multiplication, subtraction, and comparison operators."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-acorn",children:"numerals Int\n\n// Three ways of adding two numbers.\n2 + 2\nInt.add(2, 2)\n2.add(2)\n\n// Three ways of multiplying two numbers.\n2 * 2\nInt.mul(2, 2)\n2.mul(2)\n\n// Three ways of subtracting two numbers.\n4 - 2\nInt.sub(4, 2)\n4.sub(2)\n\n// Three ways for each comparison operator.\n2 < 3\nInt.lt(2, 3)\n2.lt(3)\n\n2 <= 3\nInt.lte(2, 3)\n2.lte(3)\n\n5 > 4\nInt.gt(5, 4)\n5.gt(4)\n\n7 >= 0\nInt.gte(7, 0)\n7.gte(0)\n"})}),"\n",(0,s.jsx)(e.h2,{id:"abs-int---nat",children:"abs: Int -> Nat"}),"\n",(0,s.jsx)(e.p,{children:"Converts an integer to a natural number."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-acorn",children:"abs(Int.4) = Nat.4\n"})}),"\n",(0,s.jsx)(e.p,{children:"TODO: negative example"}),"\n",(0,s.jsx)(e.h2,{id:"neg_nat-nat---int",children:"neg_nat: Nat -> Int"}),"\n",(0,s.jsx)(e.p,{children:"Converts a natural number into its negated integer version."}),"\n",(0,s.jsx)(e.p,{children:"TODO: example"}),"\n",(0,s.jsx)(e.h2,{id:"is_negative-nat---bool",children:"is_negative: Nat -> Bool"}),"\n",(0,s.jsx)(e.p,{children:"Whether an integer is negative. Zero is not negative."}),"\n",(0,s.jsx)(e.p,{children:"TODO: examples"}),"\n",(0,s.jsx)(e.h2,{id:"is_positive-nat---bool",children:"is_positive: Nat -> Bool"}),"\n",(0,s.jsx)(e.p,{children:"Whether an integer is positive. Zero is not positive."}),"\n",(0,s.jsx)(e.p,{children:"TODO: examples"}),"\n",(0,s.jsx)(e.h2,{id:"is_unit-int---bool",children:"is_unit: Int -> Bool"}),"\n",(0,s.jsx)(e.p,{children:"Whether an integer is a unit, i.e. a divisor of 1, i.e. either one or negative one."}),"\n",(0,s.jsx)(e.p,{children:"TODO: examples"}),"\n",(0,s.jsx)(e.h2,{id:"divides-int-int---bool",children:"divides: (Int, Int) -> Bool"}),"\n",(0,s.jsx)(e.p,{children:"A predicate for whether one integer divides another."}),"\n",(0,s.jsx)(e.p,{children:"TODO: examples"}),"\n",(0,s.jsx)(e.h2,{id:"gcd-int-int---int",children:"gcd: (Int, Int) -> Int"}),"\n",(0,s.jsx)(e.p,{children:"The greatest common divisor. Always returns a nonnegative integer."}),"\n",(0,s.jsx)(e.p,{children:"TODO: Examples"}),"\n",(0,s.jsx)(e.h2,{id:"spansa-int-b-int-c-int---bool",children:"spans(a: Int, b: Int, c: Int) -> Bool"}),"\n",(0,s.jsxs)(e.p,{children:["Whether ",(0,s.jsx)(e.code,{children:"c"})," can be produced by a linear combination of ",(0,s.jsx)(e.code,{children:"a"})," and ",(0,s.jsx)(e.code,{children:"b"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-acorn",children:"spans(6, 10, 2)\nnot spans(6, 10, 3)\n"})}),"\n",(0,s.jsx)(e.p,{children:"In particular, used to state Bezout's identity."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-acorn",children:"theorem spans_gcd(a: Int, b: Int) {\n    spans(a, b, gcd(a, b))\n}\n"})})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);