"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[8891],{8981:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"library/Multiset","title":"Multiset","description":"A multiset (bag) that can contain multiple copies of the same element.","source":"@site/docs/library/Multiset.md","sourceDirName":"library","slug":"/library/Multiset","permalink":"/docs/library/Multiset","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Multiset.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Monoid","permalink":"/docs/library/Monoid"},"next":{"title":"Nat","permalink":"/docs/library/Nat"}}');var s=n(4848),l=n(8453);const r={},a="Multiset",c={},o=[{value:"contains",id:"contains",level:2},{value:"has_duplicates",id:"has_duplicates",level:2},{value:"insert",id:"insert",level:2},{value:"is_empty",id:"is_empty",level:2},{value:"multiplicity",id:"multiplicity",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"multiset",children:"Multiset"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-acorn",children:"structure Multiset<T> {\n    multiplicity: T -> Nat\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"A multiset (bag) that can contain multiple copies of the same element.\nEach element has a multiplicity indicating how many times it appears."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/multiset.ac",children:"GitHub"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"contains",children:"contains"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-acorn",children:"define contains(self, item: T) -> Bool {\n    self.multiplicity(item) != 0\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"True if the multiset contains at least one copy of the given item."}),"\n",(0,s.jsx)(t.h2,{id:"has_duplicates",children:"has_duplicates"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-acorn",children:"define has_duplicates(self) -> Bool {\n    exists(x: T) {\n        self.multiplicity(x) > 1\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"True if any element appears more than once in the multiset."}),"\n",(0,s.jsx)(t.h2,{id:"insert",children:"insert"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-acorn",children:"define insert(self, item: T) -> Multiset<T> {\n    Multiset.new(function(x: T) {\n        if x = item {\n            self.multiplicity(x).suc\n        } else {\n            self.multiplicity(x)\n        }\n    })\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Adds one more copy of the given item to the multiset."}),"\n",(0,s.jsx)(t.h2,{id:"is_empty",children:"is_empty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-acorn",children:"define is_empty(self) -> Bool {\n    forall(x: T) {\n        self.multiplicity(x) = 0\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"True if the multiset is empty (contains no elements)."}),"\n",(0,s.jsx)(t.h2,{id:"multiplicity",children:"multiplicity"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-acorn",children:"Multiset.multiplicity: (Multiset<T>, T) -> Nat\n"})}),"\n",(0,s.jsx)(t.p,{children:"A function taking each element to a count of how many times it appears in the multiset."})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const s={},l=i.createContext(s);function r(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);