"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[9663],{8093:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var a=n(7538),r=n(4848),s=n(8453);const o={slug:"square-brackets",title:"Square Brackets",authors:["lacker"],tags:["language"]},c=void 0,i={authorsImageUrls:[void 0]},l=[{value:"But why?",id:"but-why",level:2},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const t={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"We're making a big change to the Acorn syntax: using square brackets for type parameters, instead of angle brackets."}),"\n",(0,r.jsx)(t.p,{children:"Before:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-acorn",children:"inductive List<T> {\n    nil\n    cons(T, List<T>)\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"After:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-acorn",children:"inductive List[T] {\n    nil\n    cons(T, List[T])\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Both syntaxes are supported, starting in Acorn 0.1.8. You are encouraged to use square brackets for new code,\nand eventually we will deprecate angle brackets."}),"\n",(0,r.jsx)(t.h2,{id:"but-why",children:"But why?"}),"\n",(0,r.jsxs)(t.p,{children:["One of the most common feature requests has been ",(0,r.jsx)(t.em,{children:"dependent types"}),". A dependent type is a type that is based on a value, not just other types. For example, \"all 4 by 4 real matrices\" is a dependent type, since it's dependent on the number 4. Dependent types are common throughout mathematics, and it's a medium-term goal for Acorn to support them cleanly."]}),"\n",(0,r.jsxs)(t.p,{children:["In the original Acorn syntax, angle brackets had two meanings. Before a value, a ",(0,r.jsx)(t.code,{children:"<"}),' meant "less than". Before a type, a ',(0,r.jsx)(t.code,{children:"<"}),' meant "a list of type parameters is about to start".']}),"\n",(0,r.jsxs)(t.p,{children:["Once we have dependent types, the logical syntax would be to treat values just like other type parameters. So a ",(0,r.jsx)(t.code,{children:"Vector<Real, 4>"})," could represent a vector of four real numbers. However, once we have values inside type parameters, we can no longer use the same method for disambiguating the meaning of the angle bracket."]}),"\n",(0,r.jsx)(t.p,{children:"For example, consider this expression:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-acorn",children:"let value = a<b>(c)>(d)\n"})}),"\n",(0,r.jsx)(t.p,{children:"It could be parsed in two ways:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-acorn",children:"let x = b > c\nlet value = a<x>(d)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Or alternatively:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-acorn",children:"let x = a<b>(c)\nlet value = x > d\n"})}),"\n",(0,r.jsx)(t.p,{children:"We have to either disambiguate using whitespace, or using a different token. Since square brackets are also reasonably common for expressing type parameters, used in Python and TypeScript, they seem like a reasonable choice."}),"\n",(0,r.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(t.p,{children:"Hopefully this migration isn't too annoying for you. If you're using an LLM agent like Claude Code, it's pretty easy - just paste in the text of this blog post and it'll figure out the migration for you. Good luck!"})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var a=n(6540);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}},7538:e=>{e.exports=JSON.parse('{"permalink":"/blog/square-brackets","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-10-14-square-brackets.md","source":"@site/blog/2025-10-14-square-brackets.md","title":"Square Brackets","description":"We\'re making a big change to the Acorn syntax: using square brackets for type parameters, instead of angle brackets.","date":"2025-10-14T00:00:00.000Z","tags":[{"inline":false,"label":"language","permalink":"/blog/tags/language","description":"Posts about the Acorn language, like new keywords or syntax."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"square-brackets","title":"Square Brackets","authors":["lacker"],"tags":["language"]},"unlisted":false,"nextItem":{"title":"Proof Certificates","permalink":"/blog/proof-certificates"}}')}}]);