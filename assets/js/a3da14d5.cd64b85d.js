"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[7384],{8379:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"language/quantifiers","title":"Quantifiers","description":"Acorn implements first-order logic through the forall and exists quantifiers. In a general sense, they create expressions out of other expressions, while adding bound variables:","source":"@site/docs/language/quantifiers.md","sourceDirName":"language","slug":"/language/quantifiers","permalink":"/docs/language/quantifiers","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/tree/main/packages/create-docusaurus/templates/shared/docs/language/quantifiers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"sidebar","previous":{"title":"Basic Concepts","permalink":"/docs/language/basic-concepts"},"next":{"title":"Variables","permalink":"/docs/language/variables"}}');var r=a(4848),t=a(8453);const i={sidebar_position:2},o="Quantifiers",l={},c=[{value:"Examples",id:"examples",level:2},{value:"forall as a Statement",id:"forall-as-a-statement",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"quantifiers",children:"Quantifiers"})}),"\n",(0,r.jsxs)(n.p,{children:["Acorn implements first-order logic through the ",(0,r.jsx)(n.code,{children:"forall"})," and ",(0,r.jsx)(n.code,{children:"exists"})," quantifiers. In a general sense, they create expressions out of other expressions, while adding bound variables:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"forall(arguments) {\n    expression\n}\n\nexists(arguments) {\n    expression\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"Quantifying over a single variable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"theorem there_is_always_a_bigger_number(a: Nat) {\n    exists(b: Nat) {\n        b > a\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Quantifying over multiple variables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"theorem dividing_by_three(n: Nat) {\n    exists(m: Nat, r: Nat) {\n        3 * m + r = n and r < 3\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Higher-order logic is fine, too. You can quantify over functions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"theorem bigifying_surjection(n: Nat) {\n    exists(f: Nat -> Nat) {\n        injective(f) and forall(a: Nat) {\n            f(a) > n\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"forall-as-a-statement",children:"forall as a Statement"}),"\n",(0,r.jsxs)(n.p,{children:["You can also use ",(0,r.jsx)(n.code,{children:"forall"})," as a statement with multiple steps inside its proof. Inside the block, the arguments are bound. The final statement is exported to be usable outside the block."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"forall(a: Nat) {\n    step_one(a)\n    step_two(a)\n    step_three(a)\n    goal(a)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Each of these statements has to be proven. Then, outside the ",(0,r.jsx)(n.code,{children:"forall"})," block, subsequent statements can use the generic form of the ",(0,r.jsx)(n.code,{children:"forall"})," expression, even though they can't access the variable ",(0,r.jsx)(n.code,{children:"a"})," any more. From the outside, it looks the same as if we had proven the expression:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"forall(a: Nat) {\n    goal(a)\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var s=a(6540);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);