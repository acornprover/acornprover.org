"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[1846],{8245:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"library/nat","title":"nat.ac","description":"The nat module provides natural numbers and some related functions.","source":"@site/docs/library/nat.md","sourceDirName":"library","slug":"/library/nat","permalink":"/docs/library/nat","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/tree/main/packages/create-docusaurus/templates/shared/docs/library/nat.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"int.ac","permalink":"/docs/library/int"},"next":{"title":"nat_gcd.ac","permalink":"/docs/library/nat_gcd"}}');var r=a(4848),o=a(8453);const s={},i="nat.ac",l={},c=[{value:"Nat",id:"nat",level:2},{value:"Nat&#39;s operators",id:"nats-operators",level:2},{value:"is_composite: Nat -&gt; Bool",id:"is_composite-nat---bool",level:2},{value:"is_prime: Nat -&gt; Bool",id:"is_prime-nat---bool",level:2},{value:"divides: (Nat, Nat) -&gt; Bool",id:"divides-nat-nat---bool",level:2},{value:"true_below: (Nat -&gt; Bool, Nat) -&gt; Bool",id:"true_below-nat---bool-nat---bool",level:2},{value:"mod: (Nat, Nat) -&gt; Nat",id:"mod-nat-nat---nat",level:2},{value:"factorial: Nat -&gt; Nat",id:"factorial-nat---nat",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"natac",children:"nat.ac"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"nat"})," module provides natural numbers and some related functions."]}),"\n",(0,r.jsx)(n.h2,{id:"nat",children:"Nat"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Nat"})," type is defined inductively. There are two constructors."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"// Zero\nNat.0\n\n// Successor\nNat.suc(n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Nat"})," is a numeral type, so you can use the ",(0,r.jsx)(n.code,{children:"numerals Nat"})," statement."]}),"\n",(0,r.jsx)(n.h2,{id:"nats-operators",children:"Nat's operators"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Nat"})," supports addition, multiplication, subtraction, and comparison operators."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:'numerals Nat\n\n// Three ways of adding two numbers.\n2 + 2\nNat.add(2, 2)\n2.add(2)\n\n// Three ways of multiplying two numbers.\n2 * 2\nNat.mul(2, 2)\n2.mul(2)\n\n// Natural number "subtraction" just stops at zero. So 1 - 2 = 0. Be careful.\n4 - 2\nNat.sub(4, 2)\n4.sub(2)\n\n// Three ways for each comparison operator.\n2 < 3\nNat.lt(2, 3)\n2.lt(3)\n\n2 <= 3\nNat.lte(2, 3)\n2.lte(3)\n\n5 > 4\nNat.gt(5, 4)\n5.gt(4)\n\n7 >= 0\nNat.gte(7, 0)\n7.gte(0)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"is_composite-nat---bool",children:"is_composite: Nat -> Bool"}),"\n",(0,r.jsx)(n.p,{children:"A predicate for whether a number is composite. 0 and 1 don't count as composite."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"is_composite(4)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"is_prime-nat---bool",children:"is_prime: Nat -> Bool"}),"\n",(0,r.jsx)(n.p,{children:"A predicate for whether a number is prime. 0 and 1 don't count as prime."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"is_prime(3)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"divides-nat-nat---bool",children:"divides: (Nat, Nat) -> Bool"}),"\n",(0,r.jsx)(n.p,{children:"A predicate for when one number divides another. Everything divides zero."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"divides(5, 10)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"true_below-nat---bool-nat---bool",children:"true_below: (Nat -> Bool, Nat) -> Bool"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"true_below(f, n)"})," means that ",(0,r.jsx)(n.code,{children:"f"})," is true for every number below ",(0,r.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"define less_than_10(n: Nat) {\n    n < 10\n}\n\ntrue_below(less_than_10, 8)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Useful for strong induction:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"theorem strong_induction(f: Nat -> Bool) {\n    forall(k: Nat) {\n        true_below(f, k) -> f(k)\n    } -> forall(n: Nat) { f(n) }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mod-nat-nat---nat",children:"mod: (Nat, Nat) -> Nat"}),"\n",(0,r.jsxs)(n.p,{children:["The remainder function. We define ",(0,r.jsx)(n.code,{children:"mod(n, 0)"})," to equal ",(0,r.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"mod(7, 4) = 3\n"})}),"\n",(0,r.jsx)(n.h2,{id:"factorial-nat---nat",children:"factorial: Nat -> Nat"}),"\n",(0,r.jsx)(n.p,{children:"The factorial function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"factorial(3) = 6\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>i});var t=a(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);