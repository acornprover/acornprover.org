"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[7604],{390:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"library/nat_gcd","title":"nat_gcd.ac","description":"The nat_gcd module contains logic around the greatest common denominator.","source":"@site/docs/library/nat_gcd.md","sourceDirName":"library","slug":"/library/nat_gcd","permalink":"/docs/library/nat_gcd","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/nat_gcd.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"nat.ac","permalink":"/docs/library/nat"},"next":{"title":"rat.ac","permalink":"/docs/library/rat"}}');var r=a(4848),c=a(8453);const o={},i="nat_gcd.ac",s={},d=[{value:"NatPair",id:"natpair",level:2},{value:"gcd_step: NatPair -&gt; NatPair",id:"gcd_step-natpair---natpair",level:2},{value:"gcd_step_n: (NatPair, Nat) -&gt; NatPair",id:"gcd_step_n-natpair-nat---natpair",level:2},{value:"false_below(f: Nat -&gt; Bool, n: Nat) -&gt; Bool",id:"false_belowf-nat---bool-n-nat---bool",level:2},{value:"decreasing_to_zero(f: Nat -&gt; Nat) -&gt; Bool",id:"decreasing_to_zerof-nat---nat---bool",level:2},{value:"gcd: (Nat, Nat) -&gt; Nat",id:"gcd-nat-nat---nat",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nat_gcdac",children:"nat_gcd.ac"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"nat_gcd"})," module contains logic around the greatest common denominator."]}),"\n",(0,r.jsx)(n.h2,{id:"natpair",children:"NatPair"}),"\n",(0,r.jsx)(n.p,{children:"A type for a pair of natural numbers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"structure NatPair {\n    first: Nat\n    second: Nat\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["It would probably be better to have some polymorphic ",(0,r.jsx)(n.code,{children:"Pair"})," class instead."]}),"\n",(0,r.jsx)(n.h2,{id:"gcd_step-natpair---natpair",children:"gcd_step: NatPair -> NatPair"}),"\n",(0,r.jsxs)(n.p,{children:["One step of the Euclidean algorithm is taking the pair ",(0,r.jsx)(n.code,{children:"(a, b)"})," and replacing it with ",(0,r.jsx)(n.code,{children:"(b, a mod b)"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"gcd_step(NatPair.new(7, 3)) = NatPair.new(3, 1)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Stops once ",(0,r.jsx)(n.code,{children:"b"})," is zero."]}),"\n",(0,r.jsx)(n.h2,{id:"gcd_step_n-natpair-nat---natpair",children:"gcd_step_n: (NatPair, Nat) -> NatPair"}),"\n",(0,r.jsxs)(n.p,{children:["What you get after running ",(0,r.jsx)(n.code,{children:"n"})," steps of the gcd algorithm."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"gcd_step(NatPair.new(1000, 17), 10) = NatPair.new(1, 0)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"false_belowf-nat---bool-n-nat---bool",children:"false_below(f: Nat -> Bool, n: Nat) -> Bool"}),"\n",(0,r.jsxs)(n.p,{children:["The opposite of ",(0,r.jsx)(n.code,{children:"nat.true_below"})," - that ",(0,r.jsx)(n.code,{children:"f"})," is false for all numbers below ",(0,r.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"define equals_one_hundred(n: Nat) {\n    n = 100\n}\n\nfalse_below(equals_one_hundred, 50)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"decreasing_to_zerof-nat---nat---bool",children:"decreasing_to_zero(f: Nat -> Nat) -> Bool"}),"\n",(0,r.jsx)(n.p,{children:"A decreasing-to-zero function strictly decreases except on zero."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"decreasing_to_zero(function(n: Nat) { n - 1 })\n"})}),"\n",(0,r.jsx)(n.h2,{id:"gcd-nat-nat---nat",children:"gcd: (Nat, Nat) -> Nat"}),"\n",(0,r.jsx)(n.p,{children:"The greatest common divisor of two natural numbers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-acorn",children:"gcd(15, 10) = 5\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is defined in terms of the Euclidean algorithm, and the subsequent theorems ",(0,r.jsx)(n.code,{children:"gcd_divides_left"}),", ",(0,r.jsx)(n.code,{children:"gcd_divides_right"}),", and ",(0,r.jsx)(n.code,{children:"gcd_is_gcd"})," prove that ",(0,r.jsx)(n.code,{children:"gcd"})," defined this way is actually the greatest common divisor."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6540);const r={},c=t.createContext(r);function o(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);