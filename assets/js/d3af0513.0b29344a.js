"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[9672],{296:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"library/Int","title":"Int","description":"The Int type represents integers.","source":"@site/docs/library/Int.md","sourceDirName":"library","slug":"/library/Int","permalink":"/docs/library/Int","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Int.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"GroupHom","permalink":"/docs/library/GroupHom"},"next":{"title":"LeftOrderedGroup","permalink":"/docs/library/LeftOrderedGroup"}}');var t=r(4848),i=r(8453);const l={},a="Int",d={},c=[{value:"abs",id:"abs",level:2},{value:"add",id:"add",level:2},{value:"exp",id:"exp",level:2},{value:"from_nat",id:"from_nat",level:2},{value:"gt",id:"gt",level:2},{value:"gte",id:"gte",level:2},{value:"is_negative",id:"is_negative",level:2},{value:"is_positive",id:"is_positive",level:2},{value:"lt",id:"lt",level:2},{value:"lte",id:"lte",level:2},{value:"mul",id:"mul",level:2},{value:"neg",id:"neg",level:2},{value:"neg_suc",id:"neg_suc",level:2},{value:"read",id:"read",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"int",children:"Int"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"inductive Int {\n    from_nat(Nat)\n    neg_suc(Nat)\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Int"})," type represents integers.\nIt's defined by its two constructors."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"from_nat"})," takes a natural number to an integer, which seems intuitive.\n",(0,t.jsx)(n.code,{children:"neg_suc"})," takes ",(0,t.jsx)(n.code,{children:"x"})," to ",(0,t.jsx)(n.code,{children:"-(x+1)"}),", which is somewhat less intuitive. We do this so\nthat every integer can be represented either as a ",(0,t.jsx)(n.code,{children:"from_nat"})," or a ",(0,t.jsx)(n.code,{children:"neg_suc"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"numerals Int\n\n2 = Int.from_nat(Nat.2)\n-2 = Int.neg_suc(Nat.1)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/int/default.ac",children:"GitHub"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"abs",children:"abs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define abs(self) -> Int {\n    Int.from_nat(abs(self))\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The absolute value of an integer."}),"\n",(0,t.jsx)(n.h2,{id:"add",children:"add"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define add(self, other: Int) -> Int {\n    sub_nat(pos_part(self) + pos_part(other), neg_part(self) + neg_part(other))\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The sum of two integers."}),"\n",(0,t.jsx)(n.h2,{id:"exp",children:"exp"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define exp(self, b: Nat) -> Int {\n    match b {\n        Nat.0 {\n            1\n        }\n        Nat.suc(pred) {\n            self * self.exp(pred)\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note that 0^0 = 1.\nTODO: we should be able to inherit ",(0,t.jsx)(n.code,{children:"pow"})," from some underlying algebraic structure."]}),"\n",(0,t.jsx)(n.h2,{id:"from_nat",children:"from_nat"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"Int.from_nat: Nat -> Int\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Int.from_nat"})," converts a natural number to an integer via the typical embedding."]}),"\n",(0,t.jsx)(n.h2,{id:"gt",children:"gt"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define gt(self, b: Int) -> Bool {\n    b < self\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["TODO: currently this is defined independently, but we should be able to just\ninherit this operator from ",(0,t.jsx)(n.code,{children:"PartialOrder"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"gte",children:"gte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define gte(self, b: Int) -> Bool {\n    b <= self\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["TODO: currently this is defined independently, but we should be able to just\ninherit this operator from ",(0,t.jsx)(n.code,{children:"PartialOrder"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"is_negative",children:"is_negative"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define is_negative(self) -> Bool {\n    self != Int.from_nat(abs(self))\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"True if the integer is negative."}),"\n",(0,t.jsx)(n.h2,{id:"is_positive",children:"is_positive"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define is_positive(self) -> Bool {\n    (-self).is_negative\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"True if the integer is positive."}),"\n",(0,t.jsx)(n.h2,{id:"lt",children:"lt"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define lt(self, b: Int) -> Bool {\n    (b - self).is_positive\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["TODO: currently this is defined independently, but we should be able to just\ninherit this operator from ",(0,t.jsx)(n.code,{children:"PartialOrder"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"lte",children:"lte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define lte(self, b: Int) -> Bool {\n    (self < b) or self = b\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"a <= b"})," when ",(0,t.jsx)(n.code,{children:"(a - b)"})," is positive or zero."]}),"\n",(0,t.jsx)(n.h2,{id:"mul",children:"mul"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define mul(self, n: Int) -> Int {\n    if n.is_positive {\n        mul_nat(self, abs(n))\n    } else {\n        -(mul_nat(self, abs(n)))\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The product of two integers."}),"\n",(0,t.jsx)(n.h2,{id:"neg",children:"neg"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define neg(self) -> Int {\n    match self {\n        Int.from_nat(n) {\n            neg_nat(n)\n        }\n        Int.neg_suc(n) {\n            Int.from_nat(n.suc)\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The negation of an integer."}),"\n",(0,t.jsx)(n.h2,{id:"neg_suc",children:"neg_suc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"Int.neg_suc: Nat -> Int\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Int.neg_suc"})," converts a natural number ",(0,t.jsx)(n.code,{children:"x"})," into ",(0,t.jsx)(n.code,{children:"-(x+1)"}),".\nThis isn't particularly intuitive, it's just to give every integer a unique constructor.\nIn particular, ",(0,t.jsx)(n.code,{children:"neg_suc"})," can construct any negative integer, but not zero."]}),"\n",(0,t.jsx)(n.h2,{id:"read",children:"read"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-acorn",children:"define read(self, other: Int) -> Int {\n    10 * self + other\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The integer formed by appending a digit to this integer in base 10."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);