"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[4892],{1324:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var s=n(1925),a=n(4848),r=n(8453);const o={slug:"typeclasses-and-generic-inductive-types",title:"Typeclasses and Generic Inductive Types",authors:["lacker"],tags:["language"],image:"/img/typeclasses.png"},i=void 0,c={authorsImageUrls:[void 0]},l=[];function p(e){const t={a:"a",code:"code",em:"em",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Since launching the Acorn beta, we've heard consistent feedback from mathematicians that they need a powerful type system to represent their favorite area of mathematics."}),"\n",(0,a.jsxs)(t.p,{children:["Today, we're releasing two big improvements to Acorn's type system. The first is ",(0,a.jsx)(t.em,{children:"typeclasses"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-acorn",children:"typeclass S: Semigroup {\n    // Semigroups have a binary operation\n    op: (S, S) -> S\n\n    // The operation must be associative\n    associative(x: S, y: S, z: S) {\n        x.op(y.op(z)) = x.op(y).op(z)\n    }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"A typeclass lets you prove things about many types at once. You can prove theorems about group theory, and then later apply them to any group. Groups, rings, fields, metric spaces, vector spaces, many mathematical concepts are naturally represented by typeclasses."}),"\n",(0,a.jsxs)(t.p,{children:["For more information, see the ",(0,a.jsx)(t.a,{href:"/docs/language/typeclasses/",children:"typeclasses documentation"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["The second improvement is ",(0,a.jsx)(t.em,{children:"generic inductive types"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-acorn",children:"inductive List<T> {\n    nil\n    cons(T, List<T>)\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:'Generic inductive types are another way to let you prove theorems about a general type, and apply them to others. Many "container" sorts of objects like lists, finite sets, or multisets are naturally represented by generic inductive types.'}),"\n",(0,a.jsxs)(t.p,{children:["The Acorn AI has been updated as well, so it knows how to prove theorems using the new type system. Give it a try! Installing Acorn is as easy as ",(0,a.jsx)(t.a,{href:"/docs/installation/",children:"downloading a VS Code extension"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["If you run into any bugs or have any questions, let us know in ",(0,a.jsx)(t.a,{href:"https://discord.com/invite/RqXxaye4MC",children:"Discord"}),". Thanks for reading!"]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},1925:e=>{e.exports=JSON.parse('{"permalink":"/blog/typeclasses-and-generic-inductive-types","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-04-28-typeclasses-and-generic-inductive-types.md","source":"@site/blog/2025-04-28-typeclasses-and-generic-inductive-types.md","title":"Typeclasses and Generic Inductive Types","description":"Since launching the Acorn beta, we\'ve heard consistent feedback from mathematicians that they need a powerful type system to represent their favorite area of mathematics.","date":"2025-04-28T00:00:00.000Z","tags":[{"inline":false,"label":"language","permalink":"/blog/tags/language","description":"Posts about the Acorn language, like new keywords or syntax."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"typeclasses-and-generic-inductive-types","title":"Typeclasses and Generic Inductive Types","authors":["lacker"],"tags":["language"],"image":"/img/typeclasses.png"},"unlisted":false,"prevItem":{"title":"Extending Typeclasses","permalink":"/blog/extending-typeclasses"},"nextItem":{"title":"The Build Cache","permalink":"/blog/the-build-cache"}}')}}]);