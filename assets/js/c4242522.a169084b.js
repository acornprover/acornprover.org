"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[23],{9293:(e,r,d)=>{d.r(r),d.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"library/AddCommSemigroup","title":"AddCommSemigroup","description":"Extending the additive semigroup with commutativity.","source":"@site/docs/library/AddCommSemigroup.md","sourceDirName":"library","slug":"/library/AddCommSemigroup","permalink":"/docs/library/AddCommSemigroup","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/AddCommSemigroup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"AddCommMonoid","permalink":"/docs/library/AddCommMonoid"},"next":{"title":"AddGroup","permalink":"/docs/library/AddGroup"}}');var i=d(4848),n=d(8453);const t={},a="AddCommSemigroup",s={},c=[{value:"add",id:"add",level:2},{value:"add_associative",id:"add_associative",level:2},{value:"commutative",id:"commutative",level:2}];function m(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"addcommsemigroup",children:"AddCommSemigroup"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-acorn",children:"typeclass A: AddCommSemigroup extends AddSemigroup {\n    commutative(a: A, b: A) {\n        a + b = b + a\n    }\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:"Extending the additive semigroup with commutativity."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/add_comm_semigroup.ac",children:"GitHub"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"add",children:"add"}),"\n",(0,i.jsxs)(r.p,{children:["Inherited from ",(0,i.jsx)(r.a,{href:"../AddSemigroup/#add",children:"AddSemigroup"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"add_associative",children:"add_associative"}),"\n",(0,i.jsxs)(r.p,{children:["Inherited from ",(0,i.jsx)(r.a,{href:"../AddSemigroup/#add_associative",children:"AddSemigroup"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"commutative",children:"commutative"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-acorn",children:"commutative(a: A, b: A) {\n    a + b = b + a\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["The addition operation must be commutative: ",(0,i.jsx)(r.code,{children:"a + b = b + a"}),"."]})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,r,d)=>{d.d(r,{R:()=>t,x:()=>a});var o=d(6540);const i={},n=o.createContext(i);function t(e){const r=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(n.Provider,{value:r},e.children)}}}]);