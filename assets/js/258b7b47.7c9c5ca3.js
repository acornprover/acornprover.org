"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[6218],{591:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"library/Nat","title":"Nat","description":"Natural numbers, the soul of arithmetic.","source":"@site/docs/library/Nat.md","sourceDirName":"library","slug":"/library/Nat","permalink":"/docs/library/Nat","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Nat.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Multiset","permalink":"/docs/library/Multiset"},"next":{"title":"Option","permalink":"/docs/library/Option"}}');var a=s(4848),i=s(8453);const l={},t="Nat",d={},c=[{value:"add",id:"add",level:2},{value:"divides",id:"divides",level:2},{value:"exp",id:"exp",level:2},{value:"factorial",id:"factorial",level:2},{value:"is_composite",id:"is_composite",level:2},{value:"is_prime",id:"is_prime",level:2},{value:"lte",id:"lte",level:2},{value:"mod",id:"mod",level:2},{value:"mul",id:"mul",level:2},{value:"read",id:"read",level:2},{value:"sub",id:"sub",level:2},{value:"suc",id:"suc",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"nat",children:"Nat"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"inductive Nat {\n    0\n    suc(Nat)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Natural numbers, the soul of arithmetic.\nWe build natural numbers from Acorn's inherent properties of inductive types."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/nat/default.ac",children:"GitHub"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"add",children:"add"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define add(self, other: Nat) -> Nat {\n    match other {\n        Nat.0 {\n            self\n        }\n        Nat.suc(pred) {\n            self.add(pred).suc\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Addition is defined recursively."}),"\n",(0,a.jsx)(n.h2,{id:"divides",children:"divides"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define divides(self, b: Nat) -> Bool {\n    exists(c: Nat) {\n        self * c = b\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this number divides b (equivalently, there exists c such that this * c = b)."}),"\n",(0,a.jsx)(n.h2,{id:"exp",children:"exp"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define exp(self, b: Nat) -> Nat {\n    match b {\n        Nat.0 {\n            1\n        }\n        Nat.suc(pred) {\n            self * self.exp(pred)\n        }\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Note that 0^0 = 1.\nTODO: ideally this would use an inherited ",(0,a.jsx)(n.code,{children:"pow"})," from ",(0,a.jsx)(n.code,{children:"Monoid"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"factorial",children:"factorial"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define factorial(self) -> Nat {\n    match self {\n        Nat.0 {\n            1\n        }\n        Nat.suc(pred) {\n            self * pred.factorial\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The factorial of this number (the product 1 * 2 * ... * n)."}),"\n",(0,a.jsx)(n.h2,{id:"is_composite",children:"is_composite"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define is_composite(self) -> Bool {\n    exists(b: Nat, c: Nat) {\n        1 < b and 1 < c and self = b * c\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this number is composite (has nontrivial factors)."}),"\n",(0,a.jsx)(n.h2,{id:"is_prime",children:"is_prime"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define is_prime(self) -> Bool {\n    1 < self and not self.is_composite\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"True if this number is prime (greater than 1 and not composite)."}),"\n",(0,a.jsx)(n.h2,{id:"lte",children:"lte"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define lte(self, b: Nat) -> Bool {\n    exists(c: Nat) {\n        self + c = b\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"a <= b"})," if there's a natural number that can be added to ",(0,a.jsx)(n.code,{children:"a"})," to get ",(0,a.jsx)(n.code,{children:"b"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"mod",children:"mod"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"let mod = mod\n"})}),"\n",(0,a.jsx)(n.h2,{id:"mul",children:"mul"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define mul(self, b: Nat) -> Nat {\n    match b {\n        Nat.0 {\n            0\n        }\n        Nat.suc(pred) {\n            self.mul(pred) + self\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Multiplication is defined recursively."}),"\n",(0,a.jsx)(n.h2,{id:"read",children:"read"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define read(self, other: Nat) -> Nat {\n    10 * self + other\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The number formed by appending a digit to this one in base 10."}),"\n",(0,a.jsx)(n.h2,{id:"sub",children:"sub"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"define sub(self, b: Nat) -> Nat {\n    bounded_sub(self, b)\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:['Subtraction on natural numbers is defined oddly; it "caps out" at zero.\nIf ',(0,a.jsx)(n.code,{children:"self < b"}),", then ",(0,a.jsx)(n.code,{children:"self - b = 0"}),'.\nIt would be better to define this as "not valid" on some inputs, but\nthe language doesn\'t make that convenient yet.']}),"\n",(0,a.jsx)(n.h2,{id:"suc",children:"suc"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"Nat.suc: Nat -> Nat\n"})}),"\n",(0,a.jsx)(n.p,{children:"The successor of a natural number is also a natural number."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var r=s(6540);const a={},i=r.createContext(a);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);