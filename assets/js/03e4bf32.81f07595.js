"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[3132],{8493:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"library/rat","title":"rat.ac","description":"The rat module provides rational numbers and related functions.","source":"@site/docs/library/rat.md","sourceDirName":"library","slug":"/library/rat","permalink":"/docs/library/rat","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/rat.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"nat_gcd.ac","permalink":"/docs/library/nat_gcd"},"next":{"title":"real.ac","permalink":"/docs/library/real"}}');var a=t(4848),i=t(8453);const o={},s="rat.ac",c={},l=[{value:"Rat",id:"rat",level:2},{value:"Rat&#39;s operators",id:"rats-operators",level:2},{value:"Rat.is_negative: self -&gt; Bool",id:"ratis_negative-self---bool",level:2},{value:"Rat.is_positive: self -&gt; Bool",id:"ratis_positive-self---bool",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"ratac",children:"rat.ac"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"rat"})," module provides rational numbers and related functions."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/rat.ac",children:"See the code on GitHub."})}),"\n",(0,a.jsx)(n.h2,{id:"rat",children:"Rat"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Rat"})," type is a constrained structure built on ",(0,a.jsx)(n.code,{children:"Int"}),"s."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"structure Rat {\n    num: Int\n    denom: Int\n} constraint {\n    denom.is_positive and gcd(num, denom) = 1\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Rat"})," is a numeral type, so you can use the ",(0,a.jsx)(n.code,{children:"numerals Rat"})," statement."]}),"\n",(0,a.jsx)(n.h2,{id:"rats-operators",children:"Rat's operators"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Rat"})," supports addition, multiplication, subtraction, division, negation, and comparison operators."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"numerals Rat\n\n// Typical addition, multiplication, subtraction.\n2 * (1 + 3) = 9 - 1\n\n// Division by zero is defined to be zero, because Acorn functions must be defined on their whole domain.\n1 / 0 = 0\n\n// Negation.\n-3 = -(6 / 2)\n\n// Comparison.\n1/2 < 1\n2 <= 3\n5 > 4\n7 >= 0\n"})}),"\n",(0,a.jsx)(n.h2,{id:"ratis_negative-self---bool",children:"Rat.is_negative: self -> Bool"}),"\n",(0,a.jsx)(n.p,{children:"Whether an rational number is negative. Zero is not negative."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"i(-2).is_negative\nnot 2.is_negative\nnot 0.is_negative\n"})}),"\n",(0,a.jsx)(n.h2,{id:"ratis_positive-self---bool",children:"Rat.is_positive: self -> Bool"}),"\n",(0,a.jsx)(n.p,{children:"Whether an rational number is positive. Zero is not positive."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-acorn",children:"7.is_positive\nnot (-7).is_positive\nnot 0.is_positive\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);