"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[1147],{599:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"library/Field","title":"Field","description":"A field is a commutative ring with multiplicative inverses for all non-zero elements.","source":"@site/docs/library/Field.md","sourceDirName":"library","slug":"/library/Field","permalink":"/docs/library/Field","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Field.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Complex","permalink":"/docs/library/Complex"},"next":{"title":"FiniteSet","permalink":"/docs/library/FiniteSet"}}');var d=n(4848),t=n(8453);const l={},s="Field",o={},a=[{value:"add",id:"add",level:2},{value:"add_associative",id:"add_associative",level:2},{value:"add_identity_left",id:"add_identity_left",level:2},{value:"add_identity_right",id:"add_identity_right",level:2},{value:"commutative",id:"commutative",level:2},{value:"distrib_left",id:"distrib_left",level:2},{value:"distrib_right",id:"distrib_right",level:2},{value:"field_inverse",id:"field_inverse",level:2},{value:"field_inverse_zero",id:"field_inverse_zero",level:2},{value:"inverse",id:"inverse",level:2},{value:"inverse_right",id:"inverse_right",level:2},{value:"mul",id:"mul",level:2},{value:"mul_associative",id:"mul_associative",level:2},{value:"mul_identity_left",id:"mul_identity_left",level:2},{value:"mul_identity_right",id:"mul_identity_right",level:2},{value:"neg",id:"neg",level:2},{value:"sub",id:"sub",level:2}];function h(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.header,{children:(0,d.jsx)(i.h1,{id:"field",children:"Field"})}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"typeclass F: Field extends CommRing {\n    inverse: F -> F\n    field_inverse_zero {\n        F.0.inverse = F.0\n    }\n    field_inverse(f: F) {\n        f != F.0 implies f * f.inverse = F.1\n    }\n}\n"})}),"\n",(0,d.jsx)(i.p,{children:"A field is a commutative ring with multiplicative inverses for all non-zero elements."}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/field.ac",children:"GitHub"})}),"\n",(0,d.jsx)(i.hr,{}),"\n",(0,d.jsx)(i.h2,{id:"add",children:"add"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddSemigroup/#add",children:"AddSemigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"add_associative",children:"add_associative"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddSemigroup/#add_associative",children:"AddSemigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"add_identity_left",children:"add_identity_left"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddMonoid/#add_identity_left",children:"AddMonoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"add_identity_right",children:"add_identity_right"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddMonoid/#add_identity_right",children:"AddMonoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"commutative",children:"commutative"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddCommSemigroup/#commutative",children:"AddCommSemigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"distrib_left",children:"distrib_left"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Semiring/#distrib_left",children:"Semiring"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"distrib_right",children:"distrib_right"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Semiring/#distrib_right",children:"Semiring"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"field_inverse",children:"field_inverse"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"field_inverse(f: F) {\n    f != F.0 implies f * f.inverse = F.1\n}\n"})}),"\n",(0,d.jsx)(i.p,{children:'The definition of "multiplicative inverse" in a field.'}),"\n",(0,d.jsx)(i.h2,{id:"field_inverse_zero",children:"field_inverse_zero"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"field_inverse_zero {\n    F.0.inverse = F.0\n}\n"})}),"\n",(0,d.jsx)(i.p,{children:'We define the field inverse so that the inverse of zero is zero.\nIt would be nice to instead express that an inverse is "not valid" or yields "no value"\nbut it is not convenient to do so in the current type system.'}),"\n",(0,d.jsx)(i.h2,{id:"inverse",children:"inverse"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-acorn",children:"inverse: F -> F\n"})}),"\n",(0,d.jsx)(i.p,{children:"The multiplicative inverse function."}),"\n",(0,d.jsx)(i.h2,{id:"inverse_right",children:"inverse_right"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddGroup/#inverse_right",children:"AddGroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul",children:"mul"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Semigroup/#mul",children:"Semigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul_associative",children:"mul_associative"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Semigroup/#mul_associative",children:"Semigroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul_identity_left",children:"mul_identity_left"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Monoid/#mul_identity_left",children:"Monoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"mul_identity_right",children:"mul_identity_right"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../Monoid/#mul_identity_right",children:"Monoid"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"neg",children:"neg"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddGroup/#neg",children:"AddGroup"}),"."]}),"\n",(0,d.jsx)(i.h2,{id:"sub",children:"sub"}),"\n",(0,d.jsxs)(i.p,{children:["Inherited from ",(0,d.jsx)(i.a,{href:"../AddGroup/#sub",children:"AddGroup"}),"."]})]})}function c(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>s});var r=n(6540);const d={},t=r.createContext(d);function l(e){const i=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);