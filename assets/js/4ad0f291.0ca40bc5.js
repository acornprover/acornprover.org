"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[5544],{8651:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"library/AddSemigroup","title":"AddSemigroup","description":"An additive semigroup is associative, and that\'s about it.","source":"@site/docs/library/AddSemigroup.md","sourceDirName":"library","slug":"/library/AddSemigroup","permalink":"/docs/library/AddSemigroup","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/AddSemigroup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"AddMonoid","permalink":"/docs/library/AddMonoid"},"next":{"title":"Color","permalink":"/docs/library/Color"}}');var d=a(4848),i=a(8453);const o={},t="AddSemigroup",s={},c=[{value:"add",id:"add",level:2},{value:"add_associative",id:"add_associative",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"addsemigroup",children:"AddSemigroup"})}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-acorn",children:"typeclass A: AddSemigroup {\n    add: (A, A) -> A\n    add_associative(a: A, b: A, c: A) {\n        a + (b + c) = (a + b) + c\n    }\n}\n"})}),"\n",(0,d.jsx)(r.p,{children:"An additive semigroup is associative, and that's about it."}),"\n",(0,d.jsx)(r.p,{children:(0,d.jsx)(r.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/add_semigroup.ac",children:"GitHub"})}),"\n",(0,d.jsx)(r.hr,{}),"\n",(0,d.jsx)(r.h2,{id:"add",children:"add"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-acorn",children:"add: (A, A) -> A\n"})}),"\n",(0,d.jsx)(r.p,{children:"The binary addition operation that combines two elements of the semigroup."}),"\n",(0,d.jsx)(r.h2,{id:"add_associative",children:"add_associative"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-acorn",children:"add_associative(a: A, b: A, c: A) {\n    a + (b + c) = (a + b) + c\n}\n"})}),"\n",(0,d.jsxs)(r.p,{children:["The addition operation must be associative: ",(0,d.jsx)(r.code,{children:"(a + b) + c = a + (b + c)"}),"."]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},8453:(e,r,a)=>{a.d(r,{R:()=>o,x:()=>t});var n=a(6540);const d={},i=n.createContext(d);function o(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);