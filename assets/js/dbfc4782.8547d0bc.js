"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[8749],{1895:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"proof-certificates","metadata":{"permalink":"/blog/proof-certificates","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-09-19-proof-certificates.md","source":"@site/blog/2025-09-19-proof-certificates.md","title":"Proof Certificates","description":"Acorn 0.1 is out! It might not be obvious at first, but there\'s a big change in the guts of how the prover works. When a proof is successfully verified, the build directory now contains a \\"proof certificate\\" explaining step by step how the proof works.","date":"2025-09-19T00:00:00.000Z","tags":[{"inline":false,"label":"tooling","permalink":"/blog/tags/tooling","description":"Posts about the Acorn tools, like the VS Code extension."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"proof-certificates","title":"Proof Certificates","authors":["lacker"],"tags":["tooling"]},"unlisted":false,"nextItem":{"title":"Extending Typeclasses","permalink":"/blog/extending-typeclasses"}},"content":"Acorn 0.1 is out! It might not be obvious at first, but there\'s a big change in the guts of how the prover works. When a proof is successfully verified, the build directory now contains a \\"proof certificate\\" explaining step by step how the proof works.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe proof certificate itself is simple: it\'s just valid Acorn code. It spells out every step of the proof in high detail. If you want to take a look under the hood, the certificates are kept in `.jsonl` files in the `build` directory, or alongside your `.ac` files if you don\'t have a `build` directory. They look like:\\n\\n```json\\n{\\n  \\"goal\\": \\"f(List.nil<T>)\\",\\n  \\"proof\\": [\\n    \\"List.nil<T>.contains(item) or f(List.nil<T>)\\",\\n    \\"List.nil<T>.contains(item)\\",\\n    \\"List.nil<T> != List.nil<T> or not List.nil<T>.contains(item)\\"\\n  ]\\n}\\n```\\n\\nProof certificates are a restricted subset of Acorn. They only support certain basic steps of reasoning:\\n\\n- Assuming the negated goal, to prove a contradiction\\n- Instantiation of a generic theorem\\n- Congruence closure, i.e. sequences of substitution of equal terms\\n- Propositional calculus on concrete literals\\n- Introducing variables for existential quantifiers\\n- Plus a few obscure edge cases\\n\\nSince the reasoning steps are restricted, it\'s fast to validate a proof certificate. This just speeds up many common operations with Acorn.\\n\\nMore excitingly but abstractly, the proof certificate format is no longer dependent on the internals of the prover, which means in the future we\'ll be able to experiment with slower, more powerful AI models.\\n\\nIf you\'re interested in helping out with this experimentation, let us know in [Discord](https://discord.gg/RqXxaye4MC). Happy proving!"},{"id":"extending-typeclasses","metadata":{"permalink":"/blog/extending-typeclasses","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-05-29-extending-typeclasses.md","source":"@site/blog/2025-05-29-extending-typeclasses.md","title":"Extending Typeclasses","description":"Typeclasses in Acorn provide a powerful way to define common behaviors across different types. But what happens when you need to build upon existing typeclasses? Today, we\'re introducing typeclass extension.","date":"2025-05-29T00:00:00.000Z","tags":[{"inline":false,"label":"language","permalink":"/blog/tags/language","description":"Posts about the Acorn language, like new keywords or syntax."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"extending-typeclasses","title":"Extending Typeclasses","authors":["lacker"],"tags":["language"],"image":"/img/extends.png"},"unlisted":false,"prevItem":{"title":"Proof Certificates","permalink":"/blog/proof-certificates"},"nextItem":{"title":"Typeclasses and Generic Inductive Types","permalink":"/blog/typeclasses-and-generic-inductive-types"}},"content":"Typeclasses in Acorn provide a powerful way to define common behaviors across different types. But what happens when you need to build upon existing typeclasses? Today, we\'re introducing typeclass extension.\\n\\n\x3c!-- truncate --\x3e\\n\\nWith typeclass extension, you can create more specialized typeclasses that inherit from existing ones:\\n\\n```acorn\\n// The default semigroup uses the \\"multiplication\\" operator.\\ntypeclass S: Semigroup {\\n    // The semigroup operation\\n    mul: (S, S) -> S\\n\\n    // Associativity property\\n    mul_associative(a: S, b: S, c: S) {\\n        a * (b * c) = (a * b) * c\\n    }\\n}\\n\\n// A multiplicative monoid is a multiplicative semigroup\\n// with an identity element.\\ntypeclass M: Monoid extends Semigroup {\\n    e: M\\n\\n    // The identity element must satisfy the identity property\\n    mul_identity_right(a: M) {\\n        a * M.e = a\\n    }\\n\\n    // Other direction of the identity property\\n    mul_identity_left(a: M) {\\n        M.e * a = a\\n    }\\n}\\n```\\n\\nThis allows you to build hierarchies of mathematical structures naturally, and much of [acornlib](https://github.com/acornprover/acornlib) has already been converted to use extended typeclasses.\\n\\nYou can also extend multiple typeclasses at once, combining their requirements into more complex structures. This makes it easier to model the rich relationships between different mathematical concepts.\\n\\n```acorn\\ntypeclass Ring extends Semiring, AddCommGroup\\n```\\n\\nFor more information, see the [typeclasses documentation](/docs/language/typeclasses/).\\n\\nTry out typeclass extension in the latest version of Acorn, and let us know what you think in [Discord](https://discord.com/invite/RqXxaye4MC)!"},{"id":"typeclasses-and-generic-inductive-types","metadata":{"permalink":"/blog/typeclasses-and-generic-inductive-types","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-04-28-typeclasses-and-generic-inductive-types.md","source":"@site/blog/2025-04-28-typeclasses-and-generic-inductive-types.md","title":"Typeclasses and Generic Inductive Types","description":"Since launching the Acorn beta, we\'ve heard consistent feedback from mathematicians that they need a powerful type system to represent their favorite area of mathematics.","date":"2025-04-28T00:00:00.000Z","tags":[{"inline":false,"label":"language","permalink":"/blog/tags/language","description":"Posts about the Acorn language, like new keywords or syntax."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"typeclasses-and-generic-inductive-types","title":"Typeclasses and Generic Inductive Types","authors":["lacker"],"tags":["language"],"image":"/img/typeclasses.png"},"unlisted":false,"prevItem":{"title":"Extending Typeclasses","permalink":"/blog/extending-typeclasses"},"nextItem":{"title":"The Build Cache","permalink":"/blog/the-build-cache"}},"content":"Since launching the Acorn beta, we\'ve heard consistent feedback from mathematicians that they need a powerful type system to represent their favorite area of mathematics.\\n\\nToday, we\'re releasing two big improvements to Acorn\'s type system. The first is _typeclasses_.\\n\\n\x3c!-- truncate --\x3e\\n\\n```acorn\\ntypeclass S: Semigroup {\\n    // Semigroups have a binary operation\\n    op: (S, S) -> S\\n\\n    // The operation must be associative\\n    associative(x: S, y: S, z: S) {\\n        x.op(y.op(z)) = x.op(y).op(z)\\n    }\\n}\\n```\\n\\nA typeclass lets you prove things about many types at once. You can prove theorems about group theory, and then later apply them to any group. Groups, rings, fields, metric spaces, vector spaces, many mathematical concepts are naturally represented by typeclasses.\\n\\nFor more information, see the [typeclasses documentation](/docs/language/typeclasses/).\\n\\nThe second improvement is _generic inductive types_.\\n\\n```acorn\\ninductive List<T> {\\n    nil\\n    cons(T, List<T>)\\n}\\n```\\n\\nGeneric inductive types are another way to let you prove theorems about a general type, and apply them to others. Many \\"container\\" sorts of objects like lists, finite sets, or multisets are naturally represented by generic inductive types.\\n\\nThe Acorn AI has been updated as well, so it knows how to prove theorems using the new type system. Give it a try! Installing Acorn is as easy as [downloading a VS Code extension](/docs/installation/).\\n\\nIf you run into any bugs or have any questions, let us know in [Discord](https://discord.com/invite/RqXxaye4MC). Thanks for reading!"},{"id":"the-build-cache","metadata":{"permalink":"/blog/the-build-cache","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-03-13-the-build-cache.md","source":"@site/blog/2025-03-13-the-build-cache.md","title":"The Build Cache","description":"There\'s a useful new feature in Acorn Prover 0.0.8: a build cache.","date":"2025-03-13T00:00:00.000Z","tags":[{"inline":false,"label":"tooling","permalink":"/blog/tags/tooling","description":"Posts about the Acorn tools, like the VS Code extension."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"the-build-cache","title":"The Build Cache","authors":["lacker"],"tags":["tooling"]},"unlisted":false,"prevItem":{"title":"Typeclasses and Generic Inductive Types","permalink":"/blog/typeclasses-and-generic-inductive-types"},"nextItem":{"title":"Generics","permalink":"/blog/generics"}},"content":"There\'s a useful new feature in Acorn Prover 0.0.8: a build cache.\\n\\nWhen you save changes to an Acorn project, the AI model automatically completes simple proofs with missing steps. Usually this works great, but this can make refactoring more difficult. In particular, if you make changes to a module like `nat.ac` that many other modules depend on, it can be slow to rebuild everything. If you want to remove a theorem that is used in many places, this can involve many slow rebuilds.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe build cache mostly solves this problem. Instead of discarding the detailed proof after finding it, Acorn now saves build artifacts in a `build` directory of the library. While testing, this speeds up partially-cached refactoring operations like renames by a factor of roughly 10x.\\n\\nThese build artifacts are somewhat human-readable, for the curious. In particular, it can be interesting to see the dependencies between theorems. These make up most of the build cache, as premise selection is the vast majority of the work of the prover:\\n\\n```\\n  add_from_int:\\n    rat:\\n    - add_int_eq_int_add\\n    real:\\n    - Real.from_int\\n    - add_from_rat\\n```\\n\\nFor the most part, though, you won\'t notice anything visibly different with Acorn 0.0.8. Everything should just be faster, and work the same way you\'re used to. Give it a try!"},{"id":"generics","metadata":{"permalink":"/blog/generics","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2025-02-26-generics.md","source":"@site/blog/2025-02-26-generics.md","title":"Generics","description":"We\'ve deployed a new version of the Acorn Prover, 0.0.5, with support for a commonly requested feature","date":"2025-02-26T00:00:00.000Z","tags":[{"inline":false,"label":"language","permalink":"/blog/tags/language","description":"Posts about the Acorn language, like new keywords or syntax."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"generics","title":"Generics","authors":["lacker"],"tags":["language"]},"unlisted":false,"prevItem":{"title":"The Build Cache","permalink":"/blog/the-build-cache"},"nextItem":{"title":"Hello World","permalink":"/blog/hello-world"}},"content":"We\'ve deployed a new version of the Acorn Prover, 0.0.5, with support for a commonly requested feature: generic types. For example, the standard library now has a `Pair` structure:\\n\\n```acorn\\nstructure Pair<T, U> {\\n    first: T\\n    second: U\\n}\\n```\\n\\n\x3c!-- truncate --\x3e\\n\\nGenerics allow defining functions, structures, or theorems with placeholders for types, so that proofs\\ncan be reused while maintaining type safety. Instead of specifying a concrete type, generics use type parameters that can be substituted with actual types when used.\\n\\nStructures, function definitions, and theorems can all be expressed generically:\\n\\n```acorn\\nstructure LatticePoint<T> {\\n    x: T\\n    y: T\\n}\\n\\nattributes LatticePoint<T> {\\n    define swap(self) -> LatticePoint<T> {\\n        LatticePoint.new(self.y, self.x)\\n    }\\n\\n    define on_main_diagonal(self) -> Bool {\\n        self.x = self.y\\n    }\\n}\\n\\ntheorem swap_is_involutive<T>(p: LatticePoint<T>) {\\n    p.swap.swap = p\\n} by {\\n    p.swap.x = p.y\\n    p.swap.y = p.x\\n}\\n\\ndefine colinear<T>(a: LatticePoint<T>,\\n                   b: LatticePoint<T>) -> Bool {\\n    a.x = b.x or a.y = b.y\\n}\\n\\ntheorem swap_colinear_imp_main<T>(a: LatticePoint<T>) {\\n    colinear(a, a.swap) implies a.on_main_diagonal\\n} by {\\n    if a.x = a.swap.x {\\n        a.on_main_diagonal\\n    } else {\\n        a.y = a.swap.y\\n        a.on_main_diagonal\\n    }\\n}\\n```\\n\\nWe\'ve updated the standard library to use generics where appropriate. If you have the Acorn Prover VS Code extension installed, updating your extension will automatically get you support for generics. Give it a try and let us know in [Discord](https://discord.gg/RqXxaye4MC) if you have any questions!"},{"id":"hello-world","metadata":{"permalink":"/blog/hello-world","editUrl":"https://github.com/acornprover/acornprover.org/edit/master/blog/2024-12-09-hello-world.md","source":"@site/blog/2024-12-09-hello-world.md","title":"Hello World","description":"Good news, everybody!","date":"2024-12-09T00:00:00.000Z","tags":[{"inline":false,"label":"meta","permalink":"/blog/tags/meta","description":"Meta-posts, that are not so much about something, but rather about something that\'s about something."}],"hasTruncateMarker":true,"authors":[{"name":"Kevin Lacker","title":"Generalist","url":"https://lacker.io","page":{"permalink":"/blog/authors/lacker"},"socials":{"x":"https://x.com/lacker","github":"https://github.com/lacker"},"imageURL":"https://github.com/lacker.png","key":"lacker"}],"frontMatter":{"slug":"hello-world","title":"Hello World","authors":["lacker"],"tags":["meta"]},"unlisted":false,"prevItem":{"title":"Generics","permalink":"/blog/generics"}},"content":"Good news, everybody!\\n\\nWith this blog post, I hereby demonstrate that the Acorn blog is now capable of handling posts.\\n\\n\x3c!-- truncate --\x3e\\n\\nTo give a brief overview, the current state of Acorn is \\"not yet ready for public consumption\\". You can [get the Acorn code from GitHub](https://github.com/acornprover/acorn) to build it yourself, or you can [browse the Acorn standard library](https://github.com/acornprover/acornlib) to get a sense of the language, but the sane distribution channels aren\'t entirely hooked up yet.\\n\\nWe\'ll be ready for private beta real soon now. Just a few more little details to touch up. Stay tuned!"}]}}')}}]);