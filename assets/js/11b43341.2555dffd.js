"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[2256],{7674:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"link","label":"Installing Acorn","href":"/docs/installation","docId":"installation","unlisted":false},{"type":"category","label":"Tutorial","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Proving A Theorem","href":"/docs/tutorial/proving-a-theorem","docId":"tutorial/proving-a-theorem","unlisted":false},{"type":"link","label":"Multi-step Proofs","href":"/docs/tutorial/multi-step-proofs","docId":"tutorial/multi-step-proofs","unlisted":false},{"type":"link","label":"Indirect Proofs","href":"/docs/tutorial/indirect-proofs","docId":"tutorial/indirect-proofs","unlisted":false},{"type":"link","label":"Induction","href":"/docs/tutorial/induction","docId":"tutorial/induction","unlisted":false},{"type":"link","label":"The Acorn Master Plan","href":"/docs/tutorial/master-plan","docId":"tutorial/master-plan","unlisted":false}],"href":"/docs/category/tutorial"},{"type":"category","label":"Language Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Basic Concepts","href":"/docs/language/basic-concepts","docId":"language/basic-concepts","unlisted":false},{"type":"link","label":"Quantifiers","href":"/docs/language/quantifiers","docId":"language/quantifiers","unlisted":false},{"type":"link","label":"Variables","href":"/docs/language/variables","docId":"language/variables","unlisted":false},{"type":"link","label":"If-else","href":"/docs/language/if-else","docId":"language/if-else","unlisted":false},{"type":"link","label":"Functions","href":"/docs/language/functions","docId":"language/functions","unlisted":false},{"type":"link","label":"Imports","href":"/docs/language/imports","docId":"language/imports","unlisted":false},{"type":"link","label":"Structure Types","href":"/docs/language/structure-types","docId":"language/structure-types","unlisted":false},{"type":"link","label":"Inductive Types","href":"/docs/language/inductive-types","docId":"language/inductive-types","unlisted":false},{"type":"link","label":"Classes","href":"/docs/language/classes","docId":"language/classes","unlisted":false},{"type":"link","label":"Generics","href":"/docs/language/generics","docId":"language/generics","unlisted":false},{"type":"link","label":"Experimental Stuff","href":"/docs/language/experimental-stuff","docId":"language/experimental-stuff","unlisted":false}],"href":"/docs/category/language-reference"},{"type":"category","label":"Library Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Bool","href":"/docs/library/bool","docId":"library/bool","unlisted":false},{"type":"link","label":"int.ac","href":"/docs/library/int","docId":"library/int","unlisted":false},{"type":"link","label":"nat.ac","href":"/docs/library/nat","docId":"library/nat","unlisted":false},{"type":"link","label":"nat_gcd.ac","href":"/docs/library/nat_gcd","docId":"library/nat_gcd","unlisted":false},{"type":"link","label":"rat.ac","href":"/docs/library/rat","docId":"library/rat","unlisted":false},{"type":"link","label":"real.ac","href":"/docs/library/real","docId":"library/real","unlisted":false}],"href":"/docs/category/library-reference"}]},"docs":{"installation":{"id":"installation","title":"Installing Acorn","description":"The primary way to use Acorn is through the Acorn Prover VS Code extension.","sidebar":"sidebar"},"language/basic-concepts":{"id":"language/basic-concepts","title":"Basic Concepts","description":"Acorn is a line-oriented language. Usually, you write one thing on one line, then continue on to the next line.","sidebar":"sidebar"},"language/classes":{"id":"language/classes","title":"Classes","description":"Once you\'ve defined an inductive type or a structure type, you can augment it with additional class methods.","sidebar":"sidebar"},"language/experimental-stuff":{"id":"language/experimental-stuff","title":"Experimental Stuff","description":"Overall, the Acorn language is in beta. Features are likely to change as we get feedback from people using the software.","sidebar":"sidebar"},"language/functions":{"id":"language/functions","title":"Functions","description":"The define statement lets you define a named function.","sidebar":"sidebar"},"language/generics":{"id":"language/generics","title":"Generics","description":"Generics let you prove things once, and use the result for many different types.","sidebar":"sidebar"},"language/if-else":{"id":"language/if-else","title":"If-else","description":"You can use the if and else keywords to make a conditional expression. Its general form is:","sidebar":"sidebar"},"language/imports":{"id":"language/imports","title":"Imports","description":"Imports in Acorn work similarly to imports in Python.","sidebar":"sidebar"},"language/inductive-types":{"id":"language/inductive-types","title":"Inductive Types","description":"An inductive type can refer to itself in its definition. It describes ways to build objects of this type from other objects of the type.","sidebar":"sidebar"},"language/quantifiers":{"id":"language/quantifiers","title":"Quantifiers","description":"Acorn implements first-order logic through the forall and exists quantifiers. In a general sense, they create expressions out of other expressions, while adding bound variables:","sidebar":"sidebar"},"language/structure-types":{"id":"language/structure-types","title":"Structure Types","description":"Structure types group together objects of other types. They are defined with the structure keyword. For example, we can make a type out of two integer fields:","sidebar":"sidebar"},"language/variables":{"id":"language/variables","title":"Variables","description":"The let statement lets you give a name to an expression.","sidebar":"sidebar"},"library/bool":{"id":"library/bool","title":"Bool","description":"The Bool type is provided by the kernel, rather than a particular file in the standard library.","sidebar":"sidebar"},"library/int":{"id":"library/int","title":"int.ac","description":"The int module provides integers and related functions.","sidebar":"sidebar"},"library/nat":{"id":"library/nat","title":"nat.ac","description":"The nat module provides natural numbers and some related functions.","sidebar":"sidebar"},"library/nat_gcd":{"id":"library/nat_gcd","title":"nat_gcd.ac","description":"The nat_gcd module contains logic around the greatest common denominator.","sidebar":"sidebar"},"library/rat":{"id":"library/rat","title":"rat.ac","description":"The rat module provides rational numbers and related functions.","sidebar":"sidebar"},"library/real":{"id":"library/real","title":"real.ac","description":"The real module provides real numbers.","sidebar":"sidebar"},"tutorial/indirect-proofs":{"id":"tutorial/indirect-proofs","title":"Indirect Proofs","description":"Sometimes a proof doesn\'t fit naturally into a format where each step follows naturally from the steps before it. For example, we might want an \\"indirect proof\\" - where you assume something, then prove a contradiction, and thus conclude that your initial assumption was false.","sidebar":"sidebar"},"tutorial/induction":{"id":"tutorial/induction","title":"Induction","description":"Induction is the soul of the natural numbers. You prove something is true for zero, and that whenever it\'s true for one number, it\'s true for the next one. And there you go, it\'s true for all natural numbers.","sidebar":"sidebar"},"tutorial/master-plan":{"id":"tutorial/master-plan","title":"The Acorn Master Plan","description":"Acorn is a theorem prover. It checks that a mathematical proof is perfectly correct.","sidebar":"sidebar"},"tutorial/multi-step-proofs":{"id":"tutorial/multi-step-proofs","title":"Multi-step Proofs","description":"Often a theorem isn\'t so obvious that you just realize it\'s true in a single flash of insight. Instead, you think about it, and you start to see a sequence of things that follow from the premises. Your thought process goes:","sidebar":"sidebar"},"tutorial/proving-a-theorem":{"id":"tutorial/proving-a-theorem","title":"Proving A Theorem","description":"Open up VS Code and make a new Acorn file. An Acorn file has to end with a .ac extension, so save this new file as hello.ac.","sidebar":"sidebar"}}}}')}}]);