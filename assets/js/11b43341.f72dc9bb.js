"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[2256],{7674:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"link","label":"Installing Acorn","href":"/docs/installation","docId":"installation","unlisted":false},{"type":"category","label":"Tutorial","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Proving A Theorem","href":"/docs/tutorial/proving-a-theorem","docId":"tutorial/proving-a-theorem","unlisted":false},{"type":"link","label":"Multi-step Proofs","href":"/docs/tutorial/multi-step-proofs","docId":"tutorial/multi-step-proofs","unlisted":false},{"type":"link","label":"Indirect Proofs","href":"/docs/tutorial/indirect-proofs","docId":"tutorial/indirect-proofs","unlisted":false},{"type":"link","label":"Induction","href":"/docs/tutorial/induction","docId":"tutorial/induction","unlisted":false},{"type":"link","label":"The Acorn Master Plan","href":"/docs/tutorial/master-plan","docId":"tutorial/master-plan","unlisted":false}],"href":"/docs/category/tutorial"},{"type":"category","label":"Language Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Basic Concepts","href":"/docs/language/basic-concepts","docId":"language/basic-concepts","unlisted":false},{"type":"link","label":"Quantifiers","href":"/docs/language/quantifiers","docId":"language/quantifiers","unlisted":false},{"type":"link","label":"Variables","href":"/docs/language/variables","docId":"language/variables","unlisted":false},{"type":"link","label":"If-else","href":"/docs/language/if-else","docId":"language/if-else","unlisted":false},{"type":"link","label":"Functions","href":"/docs/language/functions","docId":"language/functions","unlisted":false},{"type":"link","label":"Imports","href":"/docs/language/imports","docId":"language/imports","unlisted":false},{"type":"link","label":"Structure Types","href":"/docs/language/structure-types","docId":"language/structure-types","unlisted":false},{"type":"link","label":"Inductive Types","href":"/docs/language/inductive-types","docId":"language/inductive-types","unlisted":false},{"type":"link","label":"Attributes","href":"/docs/language/attributes","docId":"language/attributes","unlisted":false},{"type":"link","label":"Generics","href":"/docs/language/generics","docId":"language/generics","unlisted":false},{"type":"link","label":"Typeclasses","href":"/docs/language/typeclasses","docId":"language/typeclasses","unlisted":false},{"type":"link","label":"Experimental Stuff","href":"/docs/language/experimental-stuff","docId":"language/experimental-stuff","unlisted":false}],"href":"/docs/category/language-reference"},{"type":"category","label":"Library Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AddCommGroup","href":"/docs/library/AddCommGroup","docId":"library/AddCommGroup","unlisted":false},{"type":"link","label":"AddCommMonoid","href":"/docs/library/AddCommMonoid","docId":"library/AddCommMonoid","unlisted":false},{"type":"link","label":"AddCommSemigroup","href":"/docs/library/AddCommSemigroup","docId":"library/AddCommSemigroup","unlisted":false},{"type":"link","label":"AddGroup","href":"/docs/library/AddGroup","docId":"library/AddGroup","unlisted":false},{"type":"link","label":"AddMonoid","href":"/docs/library/AddMonoid","docId":"library/AddMonoid","unlisted":false},{"type":"link","label":"AddSemigroup","href":"/docs/library/AddSemigroup","docId":"library/AddSemigroup","unlisted":false},{"type":"link","label":"Color","href":"/docs/library/Color","docId":"library/Color","unlisted":false},{"type":"link","label":"CommGroup","href":"/docs/library/CommGroup","docId":"library/CommGroup","unlisted":false},{"type":"link","label":"CommMonoid","href":"/docs/library/CommMonoid","docId":"library/CommMonoid","unlisted":false},{"type":"link","label":"CommRing","href":"/docs/library/CommRing","docId":"library/CommRing","unlisted":false},{"type":"link","label":"CommSemigroup","href":"/docs/library/CommSemigroup","docId":"library/CommSemigroup","unlisted":false},{"type":"link","label":"Complex","href":"/docs/library/Complex","docId":"library/Complex","unlisted":false},{"type":"link","label":"Field","href":"/docs/library/Field","docId":"library/Field","unlisted":false},{"type":"link","label":"FiniteGroup","href":"/docs/library/FiniteGroup","docId":"library/FiniteGroup","unlisted":false},{"type":"link","label":"FiniteSet","href":"/docs/library/FiniteSet","docId":"library/FiniteSet","unlisted":false},{"type":"link","label":"FiniteSubgroup","href":"/docs/library/FiniteSubgroup","docId":"library/FiniteSubgroup","unlisted":false},{"type":"link","label":"Group","href":"/docs/library/Group","docId":"library/Group","unlisted":false},{"type":"link","label":"GroupHom","href":"/docs/library/GroupHom","docId":"library/GroupHom","unlisted":false},{"type":"link","label":"Int","href":"/docs/library/Int","docId":"library/Int","unlisted":false},{"type":"link","label":"LeftOrderedGroup","href":"/docs/library/LeftOrderedGroup","docId":"library/LeftOrderedGroup","unlisted":false},{"type":"link","label":"LinearOrder","href":"/docs/library/LinearOrder","docId":"library/LinearOrder","unlisted":false},{"type":"link","label":"List","href":"/docs/library/List","docId":"library/List","unlisted":false},{"type":"link","label":"MetricSpace","href":"/docs/library/MetricSpace","docId":"library/MetricSpace","unlisted":false},{"type":"link","label":"Monoid","href":"/docs/library/Monoid","docId":"library/Monoid","unlisted":false},{"type":"link","label":"Multiset","href":"/docs/library/Multiset","docId":"library/Multiset","unlisted":false},{"type":"link","label":"Nat","href":"/docs/library/Nat","docId":"library/Nat","unlisted":false},{"type":"link","label":"Option","href":"/docs/library/Option","docId":"library/Option","unlisted":false},{"type":"link","label":"OrderedGroup","href":"/docs/library/OrderedGroup","docId":"library/OrderedGroup","unlisted":false},{"type":"link","label":"Pair","href":"/docs/library/Pair","docId":"library/Pair","unlisted":false},{"type":"link","label":"PartialOrder","href":"/docs/library/PartialOrder","docId":"library/PartialOrder","unlisted":false},{"type":"link","label":"Rat","href":"/docs/library/Rat","docId":"library/Rat","unlisted":false},{"type":"link","label":"Real","href":"/docs/library/Real","docId":"library/Real","unlisted":false},{"type":"link","label":"Ring","href":"/docs/library/Ring","docId":"library/Ring","unlisted":false},{"type":"link","label":"Semigroup","href":"/docs/library/Semigroup","docId":"library/Semigroup","unlisted":false},{"type":"link","label":"Semiring","href":"/docs/library/Semiring","docId":"library/Semiring","unlisted":false},{"type":"link","label":"Set","href":"/docs/library/Set","docId":"library/Set","unlisted":false},{"type":"link","label":"Subgroup","href":"/docs/library/Subgroup","docId":"library/Subgroup","unlisted":false},{"type":"link","label":"TwoType","href":"/docs/library/TwoType","docId":"library/TwoType","unlisted":false}],"href":"/docs/category/library-reference"}]},"docs":{"installation":{"id":"installation","title":"Installing Acorn","description":"The primary way to use Acorn is through the Acorn Prover VS Code extension.","sidebar":"sidebar"},"language/attributes":{"id":"language/attributes","title":"Attributes","description":"Once you\'ve defined an inductive type or a structure type, you can augment it with additional attributes.","sidebar":"sidebar"},"language/basic-concepts":{"id":"language/basic-concepts","title":"Basic Concepts","description":"Acorn is a line-oriented language. Usually, you write one thing on one line, then continue on to the next line.","sidebar":"sidebar"},"language/experimental-stuff":{"id":"language/experimental-stuff","title":"Experimental Stuff","description":"Overall, the Acorn language is in beta. Features are likely to change as we get feedback from people using the software.","sidebar":"sidebar"},"language/functions":{"id":"language/functions","title":"Functions","description":"The define statement lets you define a named function.","sidebar":"sidebar"},"language/generics":{"id":"language/generics","title":"Generics","description":"Generics let you prove things once, and use the result for many different types.","sidebar":"sidebar"},"language/if-else":{"id":"language/if-else","title":"If-else","description":"You can use the if and else keywords to make a conditional expression. Its general form is:","sidebar":"sidebar"},"language/imports":{"id":"language/imports","title":"Imports","description":"Imports in Acorn work similarly to imports in Python.","sidebar":"sidebar"},"language/inductive-types":{"id":"language/inductive-types","title":"Inductive Types","description":"An inductive type can refer to itself in its definition. It describes ways to build objects of this type from other objects of the type.","sidebar":"sidebar"},"language/quantifiers":{"id":"language/quantifiers","title":"Quantifiers","description":"Acorn implements first-order logic through the forall and exists quantifiers. In a general sense, they create expressions out of other expressions, while adding bound variables:","sidebar":"sidebar"},"language/structure-types":{"id":"language/structure-types","title":"Structure Types","description":"Structure types group together objects of other types. They are defined with the structure keyword. For example, we can make a type out of two integer fields:","sidebar":"sidebar"},"language/typeclasses":{"id":"language/typeclasses","title":"Typeclasses","description":"Typeclasses let you prove something for a bunch of types at once.","sidebar":"sidebar"},"language/variables":{"id":"language/variables","title":"Variables","description":"The let statement lets you give a name to an expression.","sidebar":"sidebar"},"library/AddCommGroup":{"id":"library/AddCommGroup","title":"AddCommGroup","description":"AddCommGroup represents an Abelian group. It\'s a commutative, additive group.","sidebar":"sidebar"},"library/AddCommMonoid":{"id":"library/AddCommMonoid","title":"AddCommMonoid","description":"AddCommMonoid represents a commutative, additive monoid.","sidebar":"sidebar"},"library/AddCommSemigroup":{"id":"library/AddCommSemigroup","title":"AddCommSemigroup","description":"Extending the additive semigroup with commutativity.","sidebar":"sidebar"},"library/AddGroup":{"id":"library/AddGroup","title":"AddGroup","description":"An additive group is an additive monoid that also has inverses.","sidebar":"sidebar"},"library/AddMonoid":{"id":"library/AddMonoid","title":"AddMonoid","description":"An additive monoid is an additive semigroup with an identity element.","sidebar":"sidebar"},"library/AddSemigroup":{"id":"library/AddSemigroup","title":"AddSemigroup","description":"An additive semigroup is associative, and that\'s about it.","sidebar":"sidebar"},"library/Color":{"id":"library/Color","title":"Color","description":"A simple enumeration type used as an example of a metric space with the discrete metric.","sidebar":"sidebar"},"library/CommGroup":{"id":"library/CommGroup","title":"CommGroup","description":"CommGroup represents an Abelian group. It\'s a commutative, multiplicative group.","sidebar":"sidebar"},"library/CommMonoid":{"id":"library/CommMonoid","title":"CommMonoid","description":"CommMonoid represents a commutative, multiplicative monoid.","sidebar":"sidebar"},"library/CommRing":{"id":"library/CommRing","title":"CommRing","description":"A commutative ring is a ring where multiplication is also commutative.","sidebar":"sidebar"},"library/CommSemigroup":{"id":"library/CommSemigroup","title":"CommSemigroup","description":"Extending the multiplicative semigroup with commutativity.","sidebar":"sidebar"},"library/Complex":{"id":"library/Complex","title":"Complex","description":"Complex numbers consist of a real part and an imaginary part.","sidebar":"sidebar"},"library/Field":{"id":"library/Field","title":"Field","description":"A field is a commutative ring with multiplicative inverses for all non-zero elements.","sidebar":"sidebar"},"library/FiniteGroup":{"id":"library/FiniteGroup","title":"FiniteGroup","description":"A group is finite if its elements can be placed in a (finite) list","sidebar":"sidebar"},"library/FiniteSet":{"id":"library/FiniteSet","title":"FiniteSet","description":"A finite set represented as a boolean membership function.","sidebar":"sidebar"},"library/FiniteSubgroup":{"id":"library/FiniteSubgroup","title":"FiniteSubgroup","description":"A finite subgroup of a finite group.","sidebar":"sidebar"},"library/Group":{"id":"library/Group","title":"Group","description":"A group is a monoid that also has inverses.","sidebar":"sidebar"},"library/GroupHom":{"id":"library/GroupHom","title":"GroupHom","description":"A group homomorphism that preserves the group structure.","sidebar":"sidebar"},"library/Int":{"id":"library/Int","title":"Int","description":"The Int type represents integers.","sidebar":"sidebar"},"library/LeftOrderedGroup":{"id":"library/LeftOrderedGroup","title":"LeftOrderedGroup","description":"A left-ordered group is a group with a left-invariant order.","sidebar":"sidebar"},"library/LinearOrder":{"id":"library/LinearOrder","title":"LinearOrder","description":"A linear order (total order) is a partial order where all elements are comparable.","sidebar":"sidebar"},"library/List":{"id":"library/List","title":"List","description":"A generic list data structure that can hold elements of any type.","sidebar":"sidebar"},"library/MetricSpace":{"id":"library/MetricSpace","title":"MetricSpace","description":"A metric space is a set equipped with a distance function that satisfies specific axioms.","sidebar":"sidebar"},"library/Monoid":{"id":"library/Monoid","title":"Monoid","description":"A multiplicative monoid is a multiplicative semigroup with an identity element.","sidebar":"sidebar"},"library/Multiset":{"id":"library/Multiset","title":"Multiset","description":"A multiset (bag) that can contain multiple copies of the same element.","sidebar":"sidebar"},"library/Nat":{"id":"library/Nat","title":"Nat","description":"Natural numbers, the soul of arithmetic.","sidebar":"sidebar"},"library/Option":{"id":"library/Option","title":"Option","description":"Optional values that can either contain a value of type T or be empty.","sidebar":"sidebar"},"library/OrderedGroup":{"id":"library/OrderedGroup","title":"OrderedGroup","description":"An ordered group has both left and right invariance of the order under multiplication.","sidebar":"sidebar"},"library/Pair":{"id":"library/Pair","title":"Pair","description":"An ordered pair of two values, possibly of different types.","sidebar":"sidebar"},"library/PartialOrder":{"id":"library/PartialOrder","title":"PartialOrder","description":"A partial order is a relation that is reflexive, transitive, and antisymmetric.","sidebar":"sidebar"},"library/Rat":{"id":"library/Rat","title":"Rat","description":"Rational numbers represented as fractions in reduced form.","sidebar":"sidebar"},"library/Real":{"id":"library/Real","title":"Real","description":"Real numbers are defined by a Dedekind cut. Specifically, using the gt_rat function which","sidebar":"sidebar"},"library/Ring":{"id":"library/Ring","title":"Ring","description":"A ring is a structure with two operations (addition and multiplication) where addition forms an abelian group,","sidebar":"sidebar"},"library/Semigroup":{"id":"library/Semigroup","title":"Semigroup","description":"The default semigroup uses the multiplication operator..","sidebar":"sidebar"},"library/Semiring":{"id":"library/Semiring","title":"Semiring","description":"A semiring is like a ring but without additive inverses.","sidebar":"sidebar"},"library/Set":{"id":"library/Set","title":"Set","description":"Sets with elements of type K are defined as Boolean functions over K","sidebar":"sidebar"},"library/Subgroup":{"id":"library/Subgroup","title":"Subgroup","description":"A subgroup of a group G, represented as a subset that is closed under the group operations.","sidebar":"sidebar"},"library/TwoType":{"id":"library/TwoType","title":"TwoType","description":"A type with exactly two values.","sidebar":"sidebar"},"tutorial/indirect-proofs":{"id":"tutorial/indirect-proofs","title":"Indirect Proofs","description":"Sometimes a proof doesn\'t fit naturally into a format where each step follows naturally from the steps before it. For example, we might want an \\"indirect proof\\" - where you assume something, then prove a contradiction, and thus conclude that your initial assumption was false.","sidebar":"sidebar"},"tutorial/induction":{"id":"tutorial/induction","title":"Induction","description":"Induction is the soul of the natural numbers. You prove something is true for zero, and that whenever it\'s true for one number, it\'s true for the next one. And there you go, it\'s true for all natural numbers.","sidebar":"sidebar"},"tutorial/master-plan":{"id":"tutorial/master-plan","title":"The Acorn Master Plan","description":"Acorn is a theorem prover. It checks that a mathematical proof is perfectly correct.","sidebar":"sidebar"},"tutorial/multi-step-proofs":{"id":"tutorial/multi-step-proofs","title":"Multi-step Proofs","description":"Often a theorem isn\'t so obvious that you just realize it\'s true in a single flash of insight. Instead, you think about it, and you start to see a sequence of things that follow from the premises. Your thought process goes:","sidebar":"sidebar"},"tutorial/proving-a-theorem":{"id":"tutorial/proving-a-theorem","title":"Proving A Theorem","description":"Open up VS Code and make a new Acorn file. An Acorn file has to end with a .ac extension, so save this new file as hello.ac.","sidebar":"sidebar"}}}}')}}]);