"use strict";(self.webpackChunkacornprover_org=self.webpackChunkacornprover_org||[]).push([[1621],{2981:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"library/Set","title":"Set","description":"Sets with elements of type K are defined as Boolean functions over K","source":"@site/docs/library/Set.md","sourceDirName":"library","slug":"/library/Set","permalink":"/docs/library/Set","draft":false,"unlisted":false,"editUrl":"https://github.com/acornprover/acornprover.org/edit/master/docs/library/Set.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Semiring","permalink":"/docs/library/Semiring"},"next":{"title":"Subgroup","permalink":"/docs/library/Subgroup"}}');var l=s(4848),t=s(8453);const r={},c="Set",a={},o=[{value:"c",id:"c",level:2},{value:"contains",id:"contains",level:2},{value:"difference",id:"difference",level:2},{value:"empty_set",id:"empty_set",level:2},{value:"intersection",id:"intersection",level:2},{value:"is_empty",id:"is_empty",level:2},{value:"is_singleton",id:"is_singleton",level:2},{value:"singleton",id:"singleton",level:2},{value:"subset",id:"subset",level:2},{value:"superset",id:"superset",level:2},{value:"union",id:"union",level:2},{value:"universal_set",id:"universal_set",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"set",children:"Set"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"structure Set[K] {\n    contains: K -> Bool\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Sets with elements of type ",(0,l.jsx)(n.code,{children:"K"})," are defined as Boolean functions over ",(0,l.jsx)(n.code,{children:"K"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/acornprover/acornlib/blob/master/src/set.ac",children:"GitHub"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"c",children:"c"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define c(self) -> Set[K] {\n    Set[K].new(negate_fun(self.contains))\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"The complement of this set."}),"\n",(0,l.jsx)(n.h2,{id:"contains",children:"contains"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"Set.contains: (Set[K], K) -> Bool\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if the element is in the set."}),"\n",(0,l.jsx)(n.h2,{id:"difference",children:"difference"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define difference(self, s: Set[K]) -> Set[K] {\n    Set[K].new(elem_in_difference(self, s))\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"self \\ s"}),"\n",(0,l.jsx)(n.h2,{id:"empty_set",children:"empty_set"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"let empty_set = Set[K].new(constant_false[K])\n"})}),"\n",(0,l.jsx)(n.p,{children:"Set basics"}),"\n",(0,l.jsx)(n.h2,{id:"intersection",children:"intersection"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define intersection(self, s: Set[K]) -> Set[K] {\n    Set[K].new(elem_in_intersection(self, s))\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"self \u2229 s"}),"\n",(0,l.jsx)(n.h2,{id:"is_empty",children:"is_empty"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define is_empty(self) -> Bool {\n    forall(x: K) {\n        not self.contains(x)\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if the set has no elements."}),"\n",(0,l.jsx)(n.h2,{id:"is_singleton",children:"is_singleton"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define is_singleton(self) -> Bool {\n    exists(a: K) {\n        self = Set[K].singleton(a)\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"True if the set contains exactly one element."}),"\n",(0,l.jsx)(n.h2,{id:"singleton",children:"singleton"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"let singleton: K -> Set[K] = function(a: K) {\n    Set[K].new(singleton_fun(a))\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a set containing exactly one element."}),"\n",(0,l.jsx)(n.h2,{id:"subset",children:"subset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define subset(self, s: Set[K]) -> Bool {\n    forall(x: K) {\n        self.contains(x) implies s.contains(x)\n    }\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"self \u2286 s"}),"\n",(0,l.jsx)(n.h2,{id:"superset",children:"superset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define superset(self, s: Set[K]) -> Bool {\n    s.subset(self)\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"self \u2287 s"}),"\n",(0,l.jsx)(n.h2,{id:"union",children:"union"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"define union(self, s: Set[K]) -> Set[K] {\n    Set.new(elem_in_union(self, s))\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"self \u222a s"}),"\n",(0,l.jsx)(n.h2,{id:"universal_set",children:"universal_set"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-acorn",children:"let universal_set = Set[K].new(negate_fun(constant_false[K]))\n"})}),"\n",(0,l.jsx)(n.p,{children:"The universal set containing all elements of type K."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(6540);const l={},t=i.createContext(l);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);