<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>The Acorn Theorem Prover Blog</title>
        <link>https://acornprover.org/blog/</link>
        <description>The Acorn Theorem Prover Blog</description>
        <lastBuildDate>Mon, 28 Apr 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Typeclasses and Generic Inductive Types]]></title>
            <link>https://acornprover.org/blog/typeclasses-and-generic-inductive-types/</link>
            <guid>https://acornprover.org/blog/typeclasses-and-generic-inductive-types/</guid>
            <pubDate>Mon, 28 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Since launching the Acorn beta, we've heard consistent feedback from mathematicians that they need a powerful type system to represent their favorite area of mathematics.]]></description>
            <content:encoded><![CDATA[<p>Since launching the Acorn beta, we've heard consistent feedback from mathematicians that they need a powerful type system to represent their favorite area of mathematics.</p>
<p>Today, we're releasing two big improvements to Acorn's type system. The first is <em>typeclasses</em>.</p>
<div class="language-acorn codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-acorn codeBlock_bY9V thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">typeclass</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">S</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">Semigroup</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// Semigroups have a binary operation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">op</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token class-name" style="color:rgb(38, 127, 153)">S</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">S</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">S</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token comment" style="color:rgb(0, 128, 0)">// The operation must be associative</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">associative</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">S</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">S</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">z</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">S</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">op</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">op</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">z</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">op</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">op</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">z</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>A typeclass lets you prove things about many types at once. You can prove theorems about group theory, and then later apply them to any group. Groups, rings, fields, metric spaces, vector spaces, many mathematical concepts are naturally represented by typeclasses.</p>
<p>For more information, see the <a href="https://acornprover.org/docs/language/typeclasses/">typeclasses documentation</a>.</p>
<p>The second improvement is <em>generic inductive types</em>.</p>
<div class="language-acorn codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-acorn codeBlock_bY9V thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">inductive</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">List</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">cons</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">List</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Generic inductive types are another way to let you prove theorems about a general type, and apply them to others. Many "container" sorts of objects like lists, finite sets, or multisets are naturally represented by generic inductive types.</p>
<p>The Acorn AI has been updated as well, so it knows how to prove theorems using the new type system. Give it a try! Installing Acorn is as easy as <a href="https://acornprover.org/docs/installation/">downloading a VS Code extension</a>.</p>
<p>If you run into any bugs or have any questions, let us know in <a href="https://discord.com/invite/RqXxaye4MC" target="_blank" rel="noopener noreferrer">Discord</a>. Thanks for reading!</p>]]></content:encoded>
            <category>language</category>
        </item>
        <item>
            <title><![CDATA[The Build Cache]]></title>
            <link>https://acornprover.org/blog/the-build-cache/</link>
            <guid>https://acornprover.org/blog/the-build-cache/</guid>
            <pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[There's a useful new feature in Acorn Prover 0.0.8: a build cache.]]></description>
            <content:encoded><![CDATA[<p>There's a useful new feature in Acorn Prover 0.0.8: a build cache.</p>
<p>When you save changes to an Acorn project, the AI model automatically completes simple proofs with missing steps. Usually this works great, but this can make refactoring more difficult. In particular, if you make changes to a module like <code>nat.ac</code> that many other modules depend on, it can be slow to rebuild everything. If you want to remove a theorem that is used in many places, this can involve many slow rebuilds.</p>
<p>The build cache mostly solves this problem. Instead of discarding the detailed proof after finding it, Acorn now saves build artifacts in a <code>build</code> directory of the library. While testing, this speeds up partially-cached refactoring operations like renames by a factor of roughly 10x.</p>
<p>These build artifacts are somewhat human-readable, for the curious. In particular, it can be interesting to see the dependencies between theorems. These make up most of the build cache, as premise selection is the vast majority of the work of the prover:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">  add_from_int:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    rat:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    - add_int_eq_int_add</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    real:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    - Real.from_int</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    - add_from_rat</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For the most part, though, you won't notice anything visibly different with Acorn 0.0.8. Everything should just be faster, and work the same way you're used to. Give it a try!</p>]]></content:encoded>
            <category>tooling</category>
        </item>
        <item>
            <title><![CDATA[Generics]]></title>
            <link>https://acornprover.org/blog/generics/</link>
            <guid>https://acornprover.org/blog/generics/</guid>
            <pubDate>Wed, 26 Feb 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[We've deployed a new version of the Acorn Prover, 0.0.5, with support for a commonly requested feature]]></description>
            <content:encoded><![CDATA[<p>We've deployed a new version of the Acorn Prover, 0.0.5, with support for a commonly requested feature: generic types. For example, the standard library now has a <code>Pair</code> structure:</p>
<div class="language-acorn codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-acorn codeBlock_bY9V thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">structure</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">Pair</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">U</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">first</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">second</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">U</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Generics allow defining functions, structures, or theorems with placeholders for types, so that proofs
can be reused while maintaining type safety. Instead of specifying a concrete type, generics use type parameters that can be substituted with actual types when used.</p>
<p>Structures, function definitions, and theorems can all be expressed generically:</p>
<div class="language-acorn codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-acorn codeBlock_bY9V thin-scrollbar" style="color:#000000;background-color:#ffffff"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token keyword" style="color:rgb(0, 0, 255)">structure</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">define</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">self</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">new</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">self</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">self</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">define</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">on_main_diagonal</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token keyword" style="color:rgb(0, 0, 255)">self</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token keyword" style="color:rgb(0, 0, 255)">self</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">self</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">theorem</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">swap_is_involutive</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">p</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">p</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">p</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">by</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">p</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">p</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">p</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">p</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">define</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">colinear</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">                   </span><span class="token variable" style="color:rgb(9, 134, 88)">b</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">b</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">or</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">b</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token keyword" style="color:rgb(0, 0, 255)">theorem</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">swap_colinear_imp_main</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token punctuation" style="color:rgb(4, 81, 165)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(38, 127, 153)">LatticePoint</span><span class="token operator" style="color:rgb(0, 0, 0)">&lt;</span><span class="token class-name" style="color:rgb(38, 127, 153)">T</span><span class="token operator" style="color:rgb(0, 0, 0)">&gt;</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token variable" style="color:rgb(9, 134, 88)">colinear</span><span class="token punctuation" style="color:rgb(4, 81, 165)">(</span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token punctuation" style="color:rgb(4, 81, 165)">,</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token punctuation" style="color:rgb(4, 81, 165)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">implies</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">on_main_diagonal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">by</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token keyword" style="color:rgb(0, 0, 255)">if</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">x</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">on_main_diagonal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(0, 0, 255)">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(4, 81, 165)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token plain"> </span><span class="token operator" style="color:rgb(0, 0, 0)">=</span><span class="token plain"> </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">swap</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">y</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">        </span><span class="token variable" style="color:rgb(9, 134, 88)">a</span><span class="token operator" style="color:rgb(0, 0, 0)">.</span><span class="token variable" style="color:rgb(9, 134, 88)">on_main_diagonal</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token punctuation" style="color:rgb(4, 81, 165)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We've updated the standard library to use generics where appropriate. If you have the Acorn Prover VS Code extension installed, updating your extension will automatically get you support for generics. Give it a try and let us know in <a href="https://discord.gg/RqXxaye4MC" target="_blank" rel="noopener noreferrer">Discord</a> if you have any questions!</p>]]></content:encoded>
            <category>language</category>
        </item>
        <item>
            <title><![CDATA[Hello World]]></title>
            <link>https://acornprover.org/blog/hello-world/</link>
            <guid>https://acornprover.org/blog/hello-world/</guid>
            <pubDate>Mon, 09 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Good news, everybody!]]></description>
            <content:encoded><![CDATA[<p>Good news, everybody!</p>
<p>With this blog post, I hereby demonstrate that the Acorn blog is now capable of handling posts.</p>
<p>To give a brief overview, the current state of Acorn is "not yet ready for public consumption". You can <a href="https://github.com/acornprover/acorn" target="_blank" rel="noopener noreferrer">get the Acorn code from GitHub</a> to build it yourself, or you can <a href="https://github.com/acornprover/acornlib" target="_blank" rel="noopener noreferrer">browse the Acorn standard library</a> to get a sense of the language, but the sane distribution channels aren't entirely hooked up yet.</p>
<p>We'll be ready for private beta real soon now. Just a few more little details to touch up. Stay tuned!</p>]]></content:encoded>
            <category>meta</category>
        </item>
    </channel>
</rss>